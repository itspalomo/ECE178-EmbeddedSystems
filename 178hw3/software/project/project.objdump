
project.elf:     file format elf32-littlenios2
project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001d0

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000028d0 memsz 0x000028d0 flags r-x
    LOAD off    0x000038f0 vaddr 0x080028f0 paddr 0x08003c2c align 2**12
         filesz 0x0000133c memsz 0x0000133c flags rw-
    LOAD off    0x00004f68 vaddr 0x08004f68 paddr 0x08004f68 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001b0  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000026c8  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  08002898  08002898  00003898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000133c  080028f0  08003c2c  000038f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  08004f68  08004f68  00004f68  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00004c2c  2**0
                  CONTENTS
  7 .sdram        00000000  08005084  08005084  00004c2c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00004c2c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000638  00000000  00000000  00004c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000801e  00000000  00000000  00005288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e53  00000000  00000000  0000d2a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000327e  00000000  00000000  000100f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000cc0  00000000  00000000  00013378  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000017fd  00000000  00000000  00014038  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000794  00000000  00000000  00015835  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00015fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001a8  00000000  00000000  00016000  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00017efe  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  00017f01  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00017f0a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00017f0b  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00017f0c  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00017f10  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00017f14  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00017f18  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00017f23  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00017f2e  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00017f39  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002f  00000000  00000000  00017f45  2**0
                  CONTENTS, READONLY
 30 .jdi          00004405  00000000  00000000  00017f74  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00098d99  00000000  00000000  0001c379  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001d0 l    d  .text	00000000 .text
08002898 l    d  .rodata	00000000 .rodata
080028f0 l    d  .rwdata	00000000 .rwdata
08004f68 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08005084 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../project_bsp//obj/HAL/src/crt0.o
08000218 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
080000a0 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
080028f0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
08000410 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
08000578 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080006ac l     F .text	00000034 alt_dev_reg
080029d0 l     O .rwdata	00001060 jtag_uart_0
08003a30 l     O .rwdata	0000002c uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800099c l     F .text	00000210 altera_avalon_jtag_uart_irq
08000bac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080011e4 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08001790 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
080018e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08001910 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08001b74 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08001e34 l     F .text	0000003c alt_get_errno
08001e70 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080004fc g     F .text	0000007c alt_main
08000250 g     F .text	00000080 _puts_r
08004f84 g     O .bss	00000100 alt_irq
08003c2c g       *ABS*	00000000 __flash_rwdata_start
08001504 g     F .text	00000090 alt_up_rs232_read_fd
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08004f68 g     O .bss	00000004 errno
08004f70 g     O .bss	00000004 alt_argv
0800bc04 g       *ABS*	00000000 _gp
08003a84 g     O .rwdata	00000180 alt_fd_list
08001ab0 g     F .text	00000090 alt_find_dev
08002554 g     F .text	00000028 memcpy
08001c38 g     F .text	0000007c alt_io_redirect
08002898 g       *ABS*	00000000 __DTOR_END__
08001490 g     F .text	00000074 alt_up_rs232_read_data
080002d0 g     F .text	00000014 puts
08000da4 g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08002460 g     F .text	00000090 alt_icache_flush
08003c1c g     O .rwdata	00000004 alt_max_fd
0800140c g     F .text	00000044 alt_up_rs232_check_parity
08001cb4 g     F .text	00000180 alt_irq_register
08003c04 g     O .rwdata	00000004 _global_impure_ptr
10000000 g       *ABS*	00000000 __alt_exception_stack_pointer
08005084 g       *ABS*	00000000 __bss_end
08002188 g     F .text	00000108 alt_tick
080020ec g     F .text	0000009c alt_alarm_stop
08004f78 g     O .bss	00000004 alt_irq_active
080000f8 g     F .exceptions	000000d8 alt_irq_handler
08003a5c g     O .rwdata	00000028 alt_dev_null
0800189c g     F .text	00000048 alt_dcache_flush_all
08003c2c g       *ABS*	00000000 __ram_rwdata_end
08003c14 g     O .rwdata	00000008 alt_dev_list
080005b4 g     F .text	000000f8 write
080028f0 g       *ABS*	00000000 __ram_rodata_end
08001594 g     F .text	00000094 alt_up_rs232_write_fd
08005084 g       *ABS*	00000000 end
080008e8 g     F .text	000000b4 altera_avalon_jtag_uart_init
08002898 g       *ABS*	00000000 __CTOR_LIST__
0ffff800 g       *ABS*	00000000 __alt_stack_pointer
08001260 g     F .text	00000074 alt_avalon_timer_sc_init
08000fc0 g     F .text	00000224 altera_avalon_jtag_uart_write
080026d4 g     F .text	00000190 __call_exitprocs
080001d0 g     F .text	0000004c _start
08004f7c g     O .bss	00000004 _alt_tick_rate
08004f80 g     O .bss	00000004 _alt_nticks
08000718 g     F .text	0000006c alt_sys_init
0800257c g     F .text	00000158 __register_exitproc
080013d0 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
08000c4c g     F .text	00000068 altera_avalon_jtag_uart_close
080028f0 g       *ABS*	00000000 __ram_rwdata_start
08002898 g       *ABS*	00000000 __ram_rodata_start
08000784 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080023bc g     F .text	000000a4 alt_get_fd
08002524 g     F .text	00000030 memcmp
08000844 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08005084 g       *ABS*	00000000 __alt_stack_base
08000894 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08001330 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
080022b4 g     F .text	00000108 alt_find_file
0800194c g     F .text	000000a4 alt_dev_llist_insert
08000300 g     F .text	000000b8 __sfvwrite_small_dev
08004f68 g       *ABS*	00000000 __bss_start
0800021c g     F .text	00000034 main
08004f74 g     O .bss	00000004 alt_envp
080007e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08003c20 g     O .rwdata	00000004 alt_errno
08002898 g       *ABS*	00000000 __CTOR_END__
08002898 g       *ABS*	00000000 __flash_rodata_start
08002898 g       *ABS*	00000000 __DTOR_LIST__
08001628 g     F .text	0000003c alt_up_rs232_open_dev
080006e0 g     F .text	00000038 alt_irq_init
08002088 g     F .text	00000064 alt_release_fd
080024f0 g     F .text	00000014 atexit
080003b8 g     F .text	00000058 _write_r
08003c08 g     O .rwdata	00000004 _impure_ptr
08004f6c g     O .bss	00000004 alt_argc
08001a50 g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
08003c0c g     O .rwdata	00000008 alt_fs_list
080012d4 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
08001450 g     F .text	00000040 alt_up_rs232_write_data
08000020 g       *ABS*	00000000 __ram_exceptions_start
08003c2c g       *ABS*	00000000 _edata
08005084 g       *ABS*	00000000 _end
080001d0 g       *ABS*	00000000 __ram_exceptions_end
08000cb4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08002290 g     F .text	00000024 altera_nios2_qsys_irq_init
08002504 g     F .text	00000020 exit
0ffff800 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
08002864 g     F .text	00000034 _exit
08001664 g     F .text	0000012c alt_alarm_start
080002e4 g     F .text	0000001c strlen
08001f34 g     F .text	00000154 open
08001b40 g     F .text	00000034 alt_icache_flush_all
08003c24 g     O .rwdata	00000008 alt_alarm_list
080019f0 g     F .text	00000060 _do_ctors
08001390 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
080017cc g     F .text	000000d0 close
08000478 g     F .text	00000084 alt_load



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_exception_stack_pointer+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08407414 	ori	at,at,464
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

08000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
 8000020:	0603fff4 	movhi	et,4095
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
 8000024:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
 8000028:	c6c01315 	stw	sp,76(et)
        mov   sp, et
 800002c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000030:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000034:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 8000038:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 800003c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000040:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000044:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 8000048:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 800004c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000050:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000054:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 8000058:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 800005c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000060:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000064:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 8000068:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 800006c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000070:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000074:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 8000078:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 800007c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000080:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000084:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 8000088:	10000326 	beq	r2,zero,8000098 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
 800008c:	20000226 	beq	r4,zero,8000098 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000090:	80000f80 	call	80000f8 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000094:	00000306 	br	80000a4 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 8000098:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 800009c:	e8bfff17 	ldw	r2,-4(ea)

080000a0 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 80000a0:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000a8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000ac:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000b8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000bc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000c8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000cc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000d8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000dc:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000e8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000ec:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 80000f0:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f4:	ef80083a 	eret

080000f8 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000f8:	defff904 	addi	sp,sp,-28
 80000fc:	dfc00615 	stw	ra,24(sp)
 8000100:	df000515 	stw	fp,20(sp)
 8000104:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 8000108:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800010c:	0005313a 	rdctl	r2,ipending
 8000110:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000114:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8000118:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 800011c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000120:	00800044 	movi	r2,1
 8000124:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8000128:	e0fffb17 	ldw	r3,-20(fp)
 800012c:	e0bffc17 	ldw	r2,-16(fp)
 8000130:	1884703a 	and	r2,r3,r2
 8000134:	10001526 	beq	r2,zero,800018c <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 8000138:	00820034 	movhi	r2,2048
 800013c:	1093e104 	addi	r2,r2,20356
 8000140:	e0fffd17 	ldw	r3,-12(fp)
 8000144:	180690fa 	slli	r3,r3,3
 8000148:	10c5883a 	add	r2,r2,r3
 800014c:	10c00017 	ldw	r3,0(r2)
 8000150:	00820034 	movhi	r2,2048
 8000154:	1093e104 	addi	r2,r2,20356
 8000158:	e13ffd17 	ldw	r4,-12(fp)
 800015c:	200890fa 	slli	r4,r4,3
 8000160:	1105883a 	add	r2,r2,r4
 8000164:	10800104 	addi	r2,r2,4
 8000168:	10800017 	ldw	r2,0(r2)
 800016c:	e17ffd17 	ldw	r5,-12(fp)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe006 	br	8000128 <__alt_exception_stack_pointer+0xf8000128>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fda1e 	bne	r2,zero,800011c <__alt_exception_stack_pointer+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

Disassembly of section .text:

080001d0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 80001d0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 80001d4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 80001d8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 80001dc:	00bffd16 	blt	zero,r2,80001d4 <__alt_exception_stack_pointer+0xf80001d4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001e0:	06c3fff4 	movhi	sp,4095
    ori sp, sp, %lo(__alt_stack_pointer)
 80001e4:	defe0014 	ori	sp,sp,63488
    movhi gp, %hi(_gp)
 80001e8:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 80001ec:	d6af0114 	ori	gp,gp,48132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001f0:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 80001f4:	1093da14 	ori	r2,r2,20328

    movhi r3, %hi(__bss_end)
 80001f8:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 80001fc:	18d42114 	ori	r3,r3,20612

    beq r2, r3, 1f
 8000200:	10c00326 	beq	r2,r3,8000210 <_start+0x40>

0:
    stw zero, (r2)
 8000204:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000208:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800020c:	10fffd36 	bltu	r2,r3,8000204 <__alt_exception_stack_pointer+0xf8000204>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000210:	80004780 	call	8000478 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000214:	80004fc0 	call	80004fc <alt_main>

08000218 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000218:	003fff06 	br	8000218 <__alt_exception_stack_pointer+0xf8000218>

0800021c <main>:
 */

#include <stdio.h>

int main()
{
 800021c:	defffe04 	addi	sp,sp,-8
 8000220:	dfc00115 	stw	ra,4(sp)
 8000224:	df000015 	stw	fp,0(sp)
 8000228:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 800022c:	01020034 	movhi	r4,2048
 8000230:	210a2604 	addi	r4,r4,10392
 8000234:	80002d00 	call	80002d0 <puts>

  return 0;
 8000238:	0005883a 	mov	r2,zero
}
 800023c:	e037883a 	mov	sp,fp
 8000240:	dfc00117 	ldw	ra,4(sp)
 8000244:	df000017 	ldw	fp,0(sp)
 8000248:	dec00204 	addi	sp,sp,8
 800024c:	f800283a 	ret

08000250 <_puts_r>:
 8000250:	defffd04 	addi	sp,sp,-12
 8000254:	dc000015 	stw	r16,0(sp)
 8000258:	2021883a 	mov	r16,r4
 800025c:	2809883a 	mov	r4,r5
 8000260:	dfc00215 	stw	ra,8(sp)
 8000264:	dc400115 	stw	r17,4(sp)
 8000268:	2823883a 	mov	r17,r5
 800026c:	80002e40 	call	80002e4 <strlen>
 8000270:	81400217 	ldw	r5,8(r16)
 8000274:	01020034 	movhi	r4,2048
 8000278:	2100c004 	addi	r4,r4,768
 800027c:	29000115 	stw	r4,4(r5)
 8000280:	100f883a 	mov	r7,r2
 8000284:	880d883a 	mov	r6,r17
 8000288:	8009883a 	mov	r4,r16
 800028c:	80003000 	call	8000300 <__sfvwrite_small_dev>
 8000290:	00ffffc4 	movi	r3,-1
 8000294:	10c00926 	beq	r2,r3,80002bc <_puts_r+0x6c>
 8000298:	81400217 	ldw	r5,8(r16)
 800029c:	01820034 	movhi	r6,2048
 80002a0:	01c00044 	movi	r7,1
 80002a4:	28800117 	ldw	r2,4(r5)
 80002a8:	318a2b04 	addi	r6,r6,10412
 80002ac:	8009883a 	mov	r4,r16
 80002b0:	103ee83a 	callr	r2
 80002b4:	10bfffe0 	cmpeqi	r2,r2,-1
 80002b8:	0085c83a 	sub	r2,zero,r2
 80002bc:	dfc00217 	ldw	ra,8(sp)
 80002c0:	dc400117 	ldw	r17,4(sp)
 80002c4:	dc000017 	ldw	r16,0(sp)
 80002c8:	dec00304 	addi	sp,sp,12
 80002cc:	f800283a 	ret

080002d0 <puts>:
 80002d0:	00820034 	movhi	r2,2048
 80002d4:	108f0204 	addi	r2,r2,15368
 80002d8:	200b883a 	mov	r5,r4
 80002dc:	11000017 	ldw	r4,0(r2)
 80002e0:	80002501 	jmpi	8000250 <_puts_r>

080002e4 <strlen>:
 80002e4:	2005883a 	mov	r2,r4
 80002e8:	10c00007 	ldb	r3,0(r2)
 80002ec:	18000226 	beq	r3,zero,80002f8 <strlen+0x14>
 80002f0:	10800044 	addi	r2,r2,1
 80002f4:	003ffc06 	br	80002e8 <__alt_exception_stack_pointer+0xf80002e8>
 80002f8:	1105c83a 	sub	r2,r2,r4
 80002fc:	f800283a 	ret

08000300 <__sfvwrite_small_dev>:
 8000300:	2880000b 	ldhu	r2,0(r5)
 8000304:	1080020c 	andi	r2,r2,8
 8000308:	10002126 	beq	r2,zero,8000390 <__sfvwrite_small_dev+0x90>
 800030c:	2880008f 	ldh	r2,2(r5)
 8000310:	defffa04 	addi	sp,sp,-24
 8000314:	dc000015 	stw	r16,0(sp)
 8000318:	dfc00515 	stw	ra,20(sp)
 800031c:	dd000415 	stw	r20,16(sp)
 8000320:	dcc00315 	stw	r19,12(sp)
 8000324:	dc800215 	stw	r18,8(sp)
 8000328:	dc400115 	stw	r17,4(sp)
 800032c:	2821883a 	mov	r16,r5
 8000330:	10001216 	blt	r2,zero,800037c <__sfvwrite_small_dev+0x7c>
 8000334:	2027883a 	mov	r19,r4
 8000338:	3025883a 	mov	r18,r6
 800033c:	3823883a 	mov	r17,r7
 8000340:	05010004 	movi	r20,1024
 8000344:	04400b0e 	bge	zero,r17,8000374 <__sfvwrite_small_dev+0x74>
 8000348:	880f883a 	mov	r7,r17
 800034c:	a440010e 	bge	r20,r17,8000354 <__sfvwrite_small_dev+0x54>
 8000350:	01c10004 	movi	r7,1024
 8000354:	8140008f 	ldh	r5,2(r16)
 8000358:	900d883a 	mov	r6,r18
 800035c:	9809883a 	mov	r4,r19
 8000360:	80003b80 	call	80003b8 <_write_r>
 8000364:	0080050e 	bge	zero,r2,800037c <__sfvwrite_small_dev+0x7c>
 8000368:	88a3c83a 	sub	r17,r17,r2
 800036c:	90a5883a 	add	r18,r18,r2
 8000370:	003ff406 	br	8000344 <__alt_exception_stack_pointer+0xf8000344>
 8000374:	0005883a 	mov	r2,zero
 8000378:	00000706 	br	8000398 <__sfvwrite_small_dev+0x98>
 800037c:	8080000b 	ldhu	r2,0(r16)
 8000380:	10801014 	ori	r2,r2,64
 8000384:	8080000d 	sth	r2,0(r16)
 8000388:	00bfffc4 	movi	r2,-1
 800038c:	00000206 	br	8000398 <__sfvwrite_small_dev+0x98>
 8000390:	00bfffc4 	movi	r2,-1
 8000394:	f800283a 	ret
 8000398:	dfc00517 	ldw	ra,20(sp)
 800039c:	dd000417 	ldw	r20,16(sp)
 80003a0:	dcc00317 	ldw	r19,12(sp)
 80003a4:	dc800217 	ldw	r18,8(sp)
 80003a8:	dc400117 	ldw	r17,4(sp)
 80003ac:	dc000017 	ldw	r16,0(sp)
 80003b0:	dec00604 	addi	sp,sp,24
 80003b4:	f800283a 	ret

080003b8 <_write_r>:
 80003b8:	defffd04 	addi	sp,sp,-12
 80003bc:	dc000015 	stw	r16,0(sp)
 80003c0:	04020034 	movhi	r16,2048
 80003c4:	dc400115 	stw	r17,4(sp)
 80003c8:	8413da04 	addi	r16,r16,20328
 80003cc:	2023883a 	mov	r17,r4
 80003d0:	2809883a 	mov	r4,r5
 80003d4:	300b883a 	mov	r5,r6
 80003d8:	380d883a 	mov	r6,r7
 80003dc:	dfc00215 	stw	ra,8(sp)
 80003e0:	80000015 	stw	zero,0(r16)
 80003e4:	80005b40 	call	80005b4 <write>
 80003e8:	00ffffc4 	movi	r3,-1
 80003ec:	10c0031e 	bne	r2,r3,80003fc <_write_r+0x44>
 80003f0:	80c00017 	ldw	r3,0(r16)
 80003f4:	18000126 	beq	r3,zero,80003fc <_write_r+0x44>
 80003f8:	88c00015 	stw	r3,0(r17)
 80003fc:	dfc00217 	ldw	ra,8(sp)
 8000400:	dc400117 	ldw	r17,4(sp)
 8000404:	dc000017 	ldw	r16,0(sp)
 8000408:	dec00304 	addi	sp,sp,12
 800040c:	f800283a 	ret

08000410 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8000410:	defffc04 	addi	sp,sp,-16
 8000414:	df000315 	stw	fp,12(sp)
 8000418:	df000304 	addi	fp,sp,12
 800041c:	e13ffd15 	stw	r4,-12(fp)
 8000420:	e17ffe15 	stw	r5,-8(fp)
 8000424:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8000428:	e0fffe17 	ldw	r3,-8(fp)
 800042c:	e0bffd17 	ldw	r2,-12(fp)
 8000430:	18800c26 	beq	r3,r2,8000464 <alt_load_section+0x54>
  {
    while( to != end )
 8000434:	00000806 	br	8000458 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8000438:	e0bffe17 	ldw	r2,-8(fp)
 800043c:	10c00104 	addi	r3,r2,4
 8000440:	e0fffe15 	stw	r3,-8(fp)
 8000444:	e0fffd17 	ldw	r3,-12(fp)
 8000448:	19000104 	addi	r4,r3,4
 800044c:	e13ffd15 	stw	r4,-12(fp)
 8000450:	18c00017 	ldw	r3,0(r3)
 8000454:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8000458:	e0fffe17 	ldw	r3,-8(fp)
 800045c:	e0bfff17 	ldw	r2,-4(fp)
 8000460:	18bff51e 	bne	r3,r2,8000438 <__alt_exception_stack_pointer+0xf8000438>
    {
      *to++ = *from++;
    }
  }
}
 8000464:	0001883a 	nop
 8000468:	e037883a 	mov	sp,fp
 800046c:	df000017 	ldw	fp,0(sp)
 8000470:	dec00104 	addi	sp,sp,4
 8000474:	f800283a 	ret

08000478 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8000478:	defffe04 	addi	sp,sp,-8
 800047c:	dfc00115 	stw	ra,4(sp)
 8000480:	df000015 	stw	fp,0(sp)
 8000484:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8000488:	01820034 	movhi	r6,2048
 800048c:	318f0b04 	addi	r6,r6,15404
 8000490:	01420034 	movhi	r5,2048
 8000494:	294a3c04 	addi	r5,r5,10480
 8000498:	01020034 	movhi	r4,2048
 800049c:	210f0b04 	addi	r4,r4,15404
 80004a0:	80004100 	call	8000410 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80004a4:	01820034 	movhi	r6,2048
 80004a8:	31807404 	addi	r6,r6,464
 80004ac:	01420034 	movhi	r5,2048
 80004b0:	29400804 	addi	r5,r5,32
 80004b4:	01020034 	movhi	r4,2048
 80004b8:	21000804 	addi	r4,r4,32
 80004bc:	80004100 	call	8000410 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80004c0:	01820034 	movhi	r6,2048
 80004c4:	318a3c04 	addi	r6,r6,10480
 80004c8:	01420034 	movhi	r5,2048
 80004cc:	294a2604 	addi	r5,r5,10392
 80004d0:	01020034 	movhi	r4,2048
 80004d4:	210a2604 	addi	r4,r4,10392
 80004d8:	80004100 	call	8000410 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80004dc:	800189c0 	call	800189c <alt_dcache_flush_all>
  alt_icache_flush_all();
 80004e0:	8001b400 	call	8001b40 <alt_icache_flush_all>
}
 80004e4:	0001883a 	nop
 80004e8:	e037883a 	mov	sp,fp
 80004ec:	dfc00117 	ldw	ra,4(sp)
 80004f0:	df000017 	ldw	fp,0(sp)
 80004f4:	dec00204 	addi	sp,sp,8
 80004f8:	f800283a 	ret

080004fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80004fc:	defffd04 	addi	sp,sp,-12
 8000500:	dfc00215 	stw	ra,8(sp)
 8000504:	df000115 	stw	fp,4(sp)
 8000508:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800050c:	0009883a 	mov	r4,zero
 8000510:	80006e00 	call	80006e0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8000514:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8000518:	80007180 	call	8000718 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800051c:	01820034 	movhi	r6,2048
 8000520:	318a2c04 	addi	r6,r6,10416
 8000524:	01420034 	movhi	r5,2048
 8000528:	294a2c04 	addi	r5,r5,10416
 800052c:	01020034 	movhi	r4,2048
 8000530:	210a2c04 	addi	r4,r4,10416
 8000534:	8001c380 	call	8001c38 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8000538:	80019f00 	call	80019f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800053c:	01020034 	movhi	r4,2048
 8000540:	21069404 	addi	r4,r4,6736
 8000544:	80024f00 	call	80024f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8000548:	d0a4da17 	ldw	r2,-27800(gp)
 800054c:	d0e4db17 	ldw	r3,-27796(gp)
 8000550:	d124dc17 	ldw	r4,-27792(gp)
 8000554:	200d883a 	mov	r6,r4
 8000558:	180b883a 	mov	r5,r3
 800055c:	1009883a 	mov	r4,r2
 8000560:	800021c0 	call	800021c <main>
 8000564:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8000568:	01000044 	movi	r4,1
 800056c:	80017cc0 	call	80017cc <close>
  exit (result);
 8000570:	e13fff17 	ldw	r4,-4(fp)
 8000574:	80025040 	call	8002504 <exit>

08000578 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8000578:	defffe04 	addi	sp,sp,-8
 800057c:	dfc00115 	stw	ra,4(sp)
 8000580:	df000015 	stw	fp,0(sp)
 8000584:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8000588:	d0a00717 	ldw	r2,-32740(gp)
 800058c:	10000326 	beq	r2,zero,800059c <alt_get_errno+0x24>
 8000590:	d0a00717 	ldw	r2,-32740(gp)
 8000594:	103ee83a 	callr	r2
 8000598:	00000106 	br	80005a0 <alt_get_errno+0x28>
 800059c:	d0a4d904 	addi	r2,gp,-27804
}
 80005a0:	e037883a 	mov	sp,fp
 80005a4:	dfc00117 	ldw	ra,4(sp)
 80005a8:	df000017 	ldw	fp,0(sp)
 80005ac:	dec00204 	addi	sp,sp,8
 80005b0:	f800283a 	ret

080005b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80005b4:	defff904 	addi	sp,sp,-28
 80005b8:	dfc00615 	stw	ra,24(sp)
 80005bc:	df000515 	stw	fp,20(sp)
 80005c0:	df000504 	addi	fp,sp,20
 80005c4:	e13ffd15 	stw	r4,-12(fp)
 80005c8:	e17ffe15 	stw	r5,-8(fp)
 80005cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80005d0:	e0bffd17 	ldw	r2,-12(fp)
 80005d4:	10000616 	blt	r2,zero,80005f0 <write+0x3c>
 80005d8:	e0bffd17 	ldw	r2,-12(fp)
 80005dc:	10c00324 	muli	r3,r2,12
 80005e0:	00820034 	movhi	r2,2048
 80005e4:	108ea104 	addi	r2,r2,14980
 80005e8:	1885883a 	add	r2,r3,r2
 80005ec:	00000106 	br	80005f4 <write+0x40>
 80005f0:	0005883a 	mov	r2,zero
 80005f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80005f8:	e0bffb17 	ldw	r2,-20(fp)
 80005fc:	10002126 	beq	r2,zero,8000684 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8000600:	e0bffb17 	ldw	r2,-20(fp)
 8000604:	10800217 	ldw	r2,8(r2)
 8000608:	108000cc 	andi	r2,r2,3
 800060c:	10001826 	beq	r2,zero,8000670 <write+0xbc>
 8000610:	e0bffb17 	ldw	r2,-20(fp)
 8000614:	10800017 	ldw	r2,0(r2)
 8000618:	10800617 	ldw	r2,24(r2)
 800061c:	10001426 	beq	r2,zero,8000670 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8000620:	e0bffb17 	ldw	r2,-20(fp)
 8000624:	10800017 	ldw	r2,0(r2)
 8000628:	10800617 	ldw	r2,24(r2)
 800062c:	e0ffff17 	ldw	r3,-4(fp)
 8000630:	180d883a 	mov	r6,r3
 8000634:	e17ffe17 	ldw	r5,-8(fp)
 8000638:	e13ffb17 	ldw	r4,-20(fp)
 800063c:	103ee83a 	callr	r2
 8000640:	e0bffc15 	stw	r2,-16(fp)
 8000644:	e0bffc17 	ldw	r2,-16(fp)
 8000648:	1000070e 	bge	r2,zero,8000668 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800064c:	80005780 	call	8000578 <alt_get_errno>
 8000650:	1007883a 	mov	r3,r2
 8000654:	e0bffc17 	ldw	r2,-16(fp)
 8000658:	0085c83a 	sub	r2,zero,r2
 800065c:	18800015 	stw	r2,0(r3)
        return -1;
 8000660:	00bfffc4 	movi	r2,-1
 8000664:	00000c06 	br	8000698 <write+0xe4>
      }
      return rval;
 8000668:	e0bffc17 	ldw	r2,-16(fp)
 800066c:	00000a06 	br	8000698 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8000670:	80005780 	call	8000578 <alt_get_errno>
 8000674:	1007883a 	mov	r3,r2
 8000678:	00800344 	movi	r2,13
 800067c:	18800015 	stw	r2,0(r3)
 8000680:	00000406 	br	8000694 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8000684:	80005780 	call	8000578 <alt_get_errno>
 8000688:	1007883a 	mov	r3,r2
 800068c:	00801444 	movi	r2,81
 8000690:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8000694:	00bfffc4 	movi	r2,-1
}
 8000698:	e037883a 	mov	sp,fp
 800069c:	dfc00117 	ldw	ra,4(sp)
 80006a0:	df000017 	ldw	fp,0(sp)
 80006a4:	dec00204 	addi	sp,sp,8
 80006a8:	f800283a 	ret

080006ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80006ac:	defffd04 	addi	sp,sp,-12
 80006b0:	dfc00215 	stw	ra,8(sp)
 80006b4:	df000115 	stw	fp,4(sp)
 80006b8:	df000104 	addi	fp,sp,4
 80006bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80006c0:	d1600404 	addi	r5,gp,-32752
 80006c4:	e13fff17 	ldw	r4,-4(fp)
 80006c8:	800194c0 	call	800194c <alt_dev_llist_insert>
}
 80006cc:	e037883a 	mov	sp,fp
 80006d0:	dfc00117 	ldw	ra,4(sp)
 80006d4:	df000017 	ldw	fp,0(sp)
 80006d8:	dec00204 	addi	sp,sp,8
 80006dc:	f800283a 	ret

080006e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80006e0:	defffd04 	addi	sp,sp,-12
 80006e4:	dfc00215 	stw	ra,8(sp)
 80006e8:	df000115 	stw	fp,4(sp)
 80006ec:	df000104 	addi	fp,sp,4
 80006f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( JOSEPROC3, joseproc3);
 80006f4:	80022900 	call	8002290 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80006f8:	00800044 	movi	r2,1
 80006fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8000700:	0001883a 	nop
 8000704:	e037883a 	mov	sp,fp
 8000708:	dfc00117 	ldw	ra,4(sp)
 800070c:	df000017 	ldw	fp,0(sp)
 8000710:	dec00204 	addi	sp,sp,8
 8000714:	f800283a 	ret

08000718 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8000718:	defffe04 	addi	sp,sp,-8
 800071c:	dfc00115 	stw	ra,4(sp)
 8000720:	df000015 	stw	fp,0(sp)
 8000724:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLOCK_TIMER, sys_clock_timer);
 8000728:	01c0fa04 	movi	r7,1000
 800072c:	000d883a 	mov	r6,zero
 8000730:	000b883a 	mov	r5,zero
 8000734:	01080004 	movi	r4,8192
 8000738:	80012600 	call	8001260 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800073c:	01800144 	movi	r6,5
 8000740:	000b883a 	mov	r5,zero
 8000744:	01020034 	movhi	r4,2048
 8000748:	210a7e04 	addi	r4,r4,10744
 800074c:	80008e80 	call	80008e8 <altera_avalon_jtag_uart_init>
 8000750:	01020034 	movhi	r4,2048
 8000754:	210a7404 	addi	r4,r4,10704
 8000758:	80006ac0 	call	80006ac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SYSID);
 800075c:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( UART, uart);
 8000760:	01020034 	movhi	r4,2048
 8000764:	210e8c04 	addi	r4,r4,14896
 8000768:	80006ac0 	call	80006ac <alt_dev_reg>
}
 800076c:	0001883a 	nop
 8000770:	e037883a 	mov	sp,fp
 8000774:	dfc00117 	ldw	ra,4(sp)
 8000778:	df000017 	ldw	fp,0(sp)
 800077c:	dec00204 	addi	sp,sp,8
 8000780:	f800283a 	ret

08000784 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8000784:	defffa04 	addi	sp,sp,-24
 8000788:	dfc00515 	stw	ra,20(sp)
 800078c:	df000415 	stw	fp,16(sp)
 8000790:	df000404 	addi	fp,sp,16
 8000794:	e13ffd15 	stw	r4,-12(fp)
 8000798:	e17ffe15 	stw	r5,-8(fp)
 800079c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80007a0:	e0bffd17 	ldw	r2,-12(fp)
 80007a4:	10800017 	ldw	r2,0(r2)
 80007a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80007ac:	e0bffc17 	ldw	r2,-16(fp)
 80007b0:	10c00a04 	addi	r3,r2,40
 80007b4:	e0bffd17 	ldw	r2,-12(fp)
 80007b8:	10800217 	ldw	r2,8(r2)
 80007bc:	100f883a 	mov	r7,r2
 80007c0:	e1bfff17 	ldw	r6,-4(fp)
 80007c4:	e17ffe17 	ldw	r5,-8(fp)
 80007c8:	1809883a 	mov	r4,r3
 80007cc:	8000da40 	call	8000da4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80007d0:	e037883a 	mov	sp,fp
 80007d4:	dfc00117 	ldw	ra,4(sp)
 80007d8:	df000017 	ldw	fp,0(sp)
 80007dc:	dec00204 	addi	sp,sp,8
 80007e0:	f800283a 	ret

080007e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80007e4:	defffa04 	addi	sp,sp,-24
 80007e8:	dfc00515 	stw	ra,20(sp)
 80007ec:	df000415 	stw	fp,16(sp)
 80007f0:	df000404 	addi	fp,sp,16
 80007f4:	e13ffd15 	stw	r4,-12(fp)
 80007f8:	e17ffe15 	stw	r5,-8(fp)
 80007fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8000800:	e0bffd17 	ldw	r2,-12(fp)
 8000804:	10800017 	ldw	r2,0(r2)
 8000808:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800080c:	e0bffc17 	ldw	r2,-16(fp)
 8000810:	10c00a04 	addi	r3,r2,40
 8000814:	e0bffd17 	ldw	r2,-12(fp)
 8000818:	10800217 	ldw	r2,8(r2)
 800081c:	100f883a 	mov	r7,r2
 8000820:	e1bfff17 	ldw	r6,-4(fp)
 8000824:	e17ffe17 	ldw	r5,-8(fp)
 8000828:	1809883a 	mov	r4,r3
 800082c:	8000fc00 	call	8000fc0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8000830:	e037883a 	mov	sp,fp
 8000834:	dfc00117 	ldw	ra,4(sp)
 8000838:	df000017 	ldw	fp,0(sp)
 800083c:	dec00204 	addi	sp,sp,8
 8000840:	f800283a 	ret

08000844 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8000844:	defffc04 	addi	sp,sp,-16
 8000848:	dfc00315 	stw	ra,12(sp)
 800084c:	df000215 	stw	fp,8(sp)
 8000850:	df000204 	addi	fp,sp,8
 8000854:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8000858:	e0bfff17 	ldw	r2,-4(fp)
 800085c:	10800017 	ldw	r2,0(r2)
 8000860:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8000864:	e0bffe17 	ldw	r2,-8(fp)
 8000868:	10c00a04 	addi	r3,r2,40
 800086c:	e0bfff17 	ldw	r2,-4(fp)
 8000870:	10800217 	ldw	r2,8(r2)
 8000874:	100b883a 	mov	r5,r2
 8000878:	1809883a 	mov	r4,r3
 800087c:	8000c4c0 	call	8000c4c <altera_avalon_jtag_uart_close>
}
 8000880:	e037883a 	mov	sp,fp
 8000884:	dfc00117 	ldw	ra,4(sp)
 8000888:	df000017 	ldw	fp,0(sp)
 800088c:	dec00204 	addi	sp,sp,8
 8000890:	f800283a 	ret

08000894 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8000894:	defffa04 	addi	sp,sp,-24
 8000898:	dfc00515 	stw	ra,20(sp)
 800089c:	df000415 	stw	fp,16(sp)
 80008a0:	df000404 	addi	fp,sp,16
 80008a4:	e13ffd15 	stw	r4,-12(fp)
 80008a8:	e17ffe15 	stw	r5,-8(fp)
 80008ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80008b0:	e0bffd17 	ldw	r2,-12(fp)
 80008b4:	10800017 	ldw	r2,0(r2)
 80008b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80008bc:	e0bffc17 	ldw	r2,-16(fp)
 80008c0:	10800a04 	addi	r2,r2,40
 80008c4:	e1bfff17 	ldw	r6,-4(fp)
 80008c8:	e17ffe17 	ldw	r5,-8(fp)
 80008cc:	1009883a 	mov	r4,r2
 80008d0:	8000cb40 	call	8000cb4 <altera_avalon_jtag_uart_ioctl>
}
 80008d4:	e037883a 	mov	sp,fp
 80008d8:	dfc00117 	ldw	ra,4(sp)
 80008dc:	df000017 	ldw	fp,0(sp)
 80008e0:	dec00204 	addi	sp,sp,8
 80008e4:	f800283a 	ret

080008e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80008e8:	defffb04 	addi	sp,sp,-20
 80008ec:	dfc00415 	stw	ra,16(sp)
 80008f0:	df000315 	stw	fp,12(sp)
 80008f4:	df000304 	addi	fp,sp,12
 80008f8:	e13ffd15 	stw	r4,-12(fp)
 80008fc:	e17ffe15 	stw	r5,-8(fp)
 8000900:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000904:	e0bffd17 	ldw	r2,-12(fp)
 8000908:	00c00044 	movi	r3,1
 800090c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8000910:	e0bffd17 	ldw	r2,-12(fp)
 8000914:	10800017 	ldw	r2,0(r2)
 8000918:	10800104 	addi	r2,r2,4
 800091c:	1007883a 	mov	r3,r2
 8000920:	e0bffd17 	ldw	r2,-12(fp)
 8000924:	10800817 	ldw	r2,32(r2)
 8000928:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 800092c:	e0bfff17 	ldw	r2,-4(fp)
 8000930:	01820034 	movhi	r6,2048
 8000934:	31826704 	addi	r6,r6,2460
 8000938:	e17ffd17 	ldw	r5,-12(fp)
 800093c:	1009883a 	mov	r4,r2
 8000940:	8001cb40 	call	8001cb4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8000944:	e0bffd17 	ldw	r2,-12(fp)
 8000948:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800094c:	e0bffd17 	ldw	r2,-12(fp)
 8000950:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8000954:	d0e4de17 	ldw	r3,-27784(gp)
 8000958:	e1fffd17 	ldw	r7,-12(fp)
 800095c:	01820034 	movhi	r6,2048
 8000960:	3182eb04 	addi	r6,r6,2988
 8000964:	180b883a 	mov	r5,r3
 8000968:	1009883a 	mov	r4,r2
 800096c:	80016640 	call	8001664 <alt_alarm_start>
 8000970:	1000040e 	bge	r2,zero,8000984 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8000974:	e0fffd17 	ldw	r3,-12(fp)
 8000978:	00a00034 	movhi	r2,32768
 800097c:	10bfffc4 	addi	r2,r2,-1
 8000980:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8000984:	0001883a 	nop
 8000988:	e037883a 	mov	sp,fp
 800098c:	dfc00117 	ldw	ra,4(sp)
 8000990:	df000017 	ldw	fp,0(sp)
 8000994:	dec00204 	addi	sp,sp,8
 8000998:	f800283a 	ret

0800099c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800099c:	defff704 	addi	sp,sp,-36
 80009a0:	df000815 	stw	fp,32(sp)
 80009a4:	df000804 	addi	fp,sp,32
 80009a8:	e13ffe15 	stw	r4,-8(fp)
 80009ac:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80009b0:	e0bffe17 	ldw	r2,-8(fp)
 80009b4:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 80009b8:	e0bffa17 	ldw	r2,-24(fp)
 80009bc:	10800017 	ldw	r2,0(r2)
 80009c0:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80009c4:	e0bffb17 	ldw	r2,-20(fp)
 80009c8:	10800104 	addi	r2,r2,4
 80009cc:	10800037 	ldwio	r2,0(r2)
 80009d0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80009d4:	e0bffc17 	ldw	r2,-16(fp)
 80009d8:	1080c00c 	andi	r2,r2,768
 80009dc:	10006d26 	beq	r2,zero,8000b94 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80009e0:	e0bffc17 	ldw	r2,-16(fp)
 80009e4:	1080400c 	andi	r2,r2,256
 80009e8:	10003526 	beq	r2,zero,8000ac0 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80009ec:	00800074 	movhi	r2,1
 80009f0:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80009f4:	e0bffa17 	ldw	r2,-24(fp)
 80009f8:	10800a17 	ldw	r2,40(r2)
 80009fc:	10800044 	addi	r2,r2,1
 8000a00:	1081ffcc 	andi	r2,r2,2047
 8000a04:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 8000a08:	e0bffa17 	ldw	r2,-24(fp)
 8000a0c:	10c00b17 	ldw	r3,44(r2)
 8000a10:	e0bffd17 	ldw	r2,-12(fp)
 8000a14:	18801526 	beq	r3,r2,8000a6c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8000a18:	e0bffb17 	ldw	r2,-20(fp)
 8000a1c:	10800037 	ldwio	r2,0(r2)
 8000a20:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8000a24:	e0bff817 	ldw	r2,-32(fp)
 8000a28:	10a0000c 	andi	r2,r2,32768
 8000a2c:	10001126 	beq	r2,zero,8000a74 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8000a30:	e0bffa17 	ldw	r2,-24(fp)
 8000a34:	10800a17 	ldw	r2,40(r2)
 8000a38:	e0fff817 	ldw	r3,-32(fp)
 8000a3c:	1809883a 	mov	r4,r3
 8000a40:	e0fffa17 	ldw	r3,-24(fp)
 8000a44:	1885883a 	add	r2,r3,r2
 8000a48:	10800e04 	addi	r2,r2,56
 8000a4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000a50:	e0bffa17 	ldw	r2,-24(fp)
 8000a54:	10800a17 	ldw	r2,40(r2)
 8000a58:	10800044 	addi	r2,r2,1
 8000a5c:	10c1ffcc 	andi	r3,r2,2047
 8000a60:	e0bffa17 	ldw	r2,-24(fp)
 8000a64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8000a68:	003fe206 	br	80009f4 <__alt_exception_stack_pointer+0xf80009f4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8000a6c:	0001883a 	nop
 8000a70:	00000106 	br	8000a78 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8000a74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8000a78:	e0bff817 	ldw	r2,-32(fp)
 8000a7c:	10bfffec 	andhi	r2,r2,65535
 8000a80:	10000f26 	beq	r2,zero,8000ac0 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000a84:	e0bffa17 	ldw	r2,-24(fp)
 8000a88:	10c00817 	ldw	r3,32(r2)
 8000a8c:	00bfff84 	movi	r2,-2
 8000a90:	1886703a 	and	r3,r3,r2
 8000a94:	e0bffa17 	ldw	r2,-24(fp)
 8000a98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8000a9c:	e0bffb17 	ldw	r2,-20(fp)
 8000aa0:	10800104 	addi	r2,r2,4
 8000aa4:	1007883a 	mov	r3,r2
 8000aa8:	e0bffa17 	ldw	r2,-24(fp)
 8000aac:	10800817 	ldw	r2,32(r2)
 8000ab0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8000ab4:	e0bffb17 	ldw	r2,-20(fp)
 8000ab8:	10800104 	addi	r2,r2,4
 8000abc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8000ac0:	e0bffc17 	ldw	r2,-16(fp)
 8000ac4:	1080800c 	andi	r2,r2,512
 8000ac8:	103fbe26 	beq	r2,zero,80009c4 <__alt_exception_stack_pointer+0xf80009c4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8000acc:	e0bffc17 	ldw	r2,-16(fp)
 8000ad0:	1004d43a 	srli	r2,r2,16
 8000ad4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8000ad8:	00001406 	br	8000b2c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8000adc:	e0bffb17 	ldw	r2,-20(fp)
 8000ae0:	e0fffa17 	ldw	r3,-24(fp)
 8000ae4:	18c00d17 	ldw	r3,52(r3)
 8000ae8:	e13ffa17 	ldw	r4,-24(fp)
 8000aec:	20c7883a 	add	r3,r4,r3
 8000af0:	18c20e04 	addi	r3,r3,2104
 8000af4:	18c00003 	ldbu	r3,0(r3)
 8000af8:	18c03fcc 	andi	r3,r3,255
 8000afc:	18c0201c 	xori	r3,r3,128
 8000b00:	18ffe004 	addi	r3,r3,-128
 8000b04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000b08:	e0bffa17 	ldw	r2,-24(fp)
 8000b0c:	10800d17 	ldw	r2,52(r2)
 8000b10:	10800044 	addi	r2,r2,1
 8000b14:	10c1ffcc 	andi	r3,r2,2047
 8000b18:	e0bffa17 	ldw	r2,-24(fp)
 8000b1c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8000b20:	e0bff917 	ldw	r2,-28(fp)
 8000b24:	10bfffc4 	addi	r2,r2,-1
 8000b28:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8000b2c:	e0bff917 	ldw	r2,-28(fp)
 8000b30:	10000526 	beq	r2,zero,8000b48 <altera_avalon_jtag_uart_irq+0x1ac>
 8000b34:	e0bffa17 	ldw	r2,-24(fp)
 8000b38:	10c00d17 	ldw	r3,52(r2)
 8000b3c:	e0bffa17 	ldw	r2,-24(fp)
 8000b40:	10800c17 	ldw	r2,48(r2)
 8000b44:	18bfe51e 	bne	r3,r2,8000adc <__alt_exception_stack_pointer+0xf8000adc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8000b48:	e0bff917 	ldw	r2,-28(fp)
 8000b4c:	103f9d26 	beq	r2,zero,80009c4 <__alt_exception_stack_pointer+0xf80009c4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8000b50:	e0bffa17 	ldw	r2,-24(fp)
 8000b54:	10c00817 	ldw	r3,32(r2)
 8000b58:	00bfff44 	movi	r2,-3
 8000b5c:	1886703a 	and	r3,r3,r2
 8000b60:	e0bffa17 	ldw	r2,-24(fp)
 8000b64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000b68:	e0bffa17 	ldw	r2,-24(fp)
 8000b6c:	10800017 	ldw	r2,0(r2)
 8000b70:	10800104 	addi	r2,r2,4
 8000b74:	1007883a 	mov	r3,r2
 8000b78:	e0bffa17 	ldw	r2,-24(fp)
 8000b7c:	10800817 	ldw	r2,32(r2)
 8000b80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8000b84:	e0bffb17 	ldw	r2,-20(fp)
 8000b88:	10800104 	addi	r2,r2,4
 8000b8c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8000b90:	003f8c06 	br	80009c4 <__alt_exception_stack_pointer+0xf80009c4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8000b94:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8000b98:	0001883a 	nop
 8000b9c:	e037883a 	mov	sp,fp
 8000ba0:	df000017 	ldw	fp,0(sp)
 8000ba4:	dec00104 	addi	sp,sp,4
 8000ba8:	f800283a 	ret

08000bac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8000bac:	defff804 	addi	sp,sp,-32
 8000bb0:	df000715 	stw	fp,28(sp)
 8000bb4:	df000704 	addi	fp,sp,28
 8000bb8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8000bbc:	e0bffb17 	ldw	r2,-20(fp)
 8000bc0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8000bc4:	e0bff917 	ldw	r2,-28(fp)
 8000bc8:	10800017 	ldw	r2,0(r2)
 8000bcc:	10800104 	addi	r2,r2,4
 8000bd0:	10800037 	ldwio	r2,0(r2)
 8000bd4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8000bd8:	e0bffa17 	ldw	r2,-24(fp)
 8000bdc:	1081000c 	andi	r2,r2,1024
 8000be0:	10000b26 	beq	r2,zero,8000c10 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8000be4:	e0bff917 	ldw	r2,-28(fp)
 8000be8:	10800017 	ldw	r2,0(r2)
 8000bec:	10800104 	addi	r2,r2,4
 8000bf0:	1007883a 	mov	r3,r2
 8000bf4:	e0bff917 	ldw	r2,-28(fp)
 8000bf8:	10800817 	ldw	r2,32(r2)
 8000bfc:	10810014 	ori	r2,r2,1024
 8000c00:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8000c04:	e0bff917 	ldw	r2,-28(fp)
 8000c08:	10000915 	stw	zero,36(r2)
 8000c0c:	00000a06 	br	8000c38 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8000c10:	e0bff917 	ldw	r2,-28(fp)
 8000c14:	10c00917 	ldw	r3,36(r2)
 8000c18:	00a00034 	movhi	r2,32768
 8000c1c:	10bfff04 	addi	r2,r2,-4
 8000c20:	10c00536 	bltu	r2,r3,8000c38 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8000c24:	e0bff917 	ldw	r2,-28(fp)
 8000c28:	10800917 	ldw	r2,36(r2)
 8000c2c:	10c00044 	addi	r3,r2,1
 8000c30:	e0bff917 	ldw	r2,-28(fp)
 8000c34:	10c00915 	stw	r3,36(r2)
 8000c38:	d0a4de17 	ldw	r2,-27784(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8000c3c:	e037883a 	mov	sp,fp
 8000c40:	df000017 	ldw	fp,0(sp)
 8000c44:	dec00104 	addi	sp,sp,4
 8000c48:	f800283a 	ret

08000c4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8000c4c:	defffd04 	addi	sp,sp,-12
 8000c50:	df000215 	stw	fp,8(sp)
 8000c54:	df000204 	addi	fp,sp,8
 8000c58:	e13ffe15 	stw	r4,-8(fp)
 8000c5c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000c60:	00000506 	br	8000c78 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8000c64:	e0bfff17 	ldw	r2,-4(fp)
 8000c68:	1090000c 	andi	r2,r2,16384
 8000c6c:	10000226 	beq	r2,zero,8000c78 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8000c70:	00bffd44 	movi	r2,-11
 8000c74:	00000b06 	br	8000ca4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000c78:	e0bffe17 	ldw	r2,-8(fp)
 8000c7c:	10c00d17 	ldw	r3,52(r2)
 8000c80:	e0bffe17 	ldw	r2,-8(fp)
 8000c84:	10800c17 	ldw	r2,48(r2)
 8000c88:	18800526 	beq	r3,r2,8000ca0 <altera_avalon_jtag_uart_close+0x54>
 8000c8c:	e0bffe17 	ldw	r2,-8(fp)
 8000c90:	10c00917 	ldw	r3,36(r2)
 8000c94:	e0bffe17 	ldw	r2,-8(fp)
 8000c98:	10800117 	ldw	r2,4(r2)
 8000c9c:	18bff136 	bltu	r3,r2,8000c64 <__alt_exception_stack_pointer+0xf8000c64>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8000ca0:	0005883a 	mov	r2,zero
}
 8000ca4:	e037883a 	mov	sp,fp
 8000ca8:	df000017 	ldw	fp,0(sp)
 8000cac:	dec00104 	addi	sp,sp,4
 8000cb0:	f800283a 	ret

08000cb4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8000cb4:	defffa04 	addi	sp,sp,-24
 8000cb8:	df000515 	stw	fp,20(sp)
 8000cbc:	df000504 	addi	fp,sp,20
 8000cc0:	e13ffd15 	stw	r4,-12(fp)
 8000cc4:	e17ffe15 	stw	r5,-8(fp)
 8000cc8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8000ccc:	00bff9c4 	movi	r2,-25
 8000cd0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8000cd4:	e0bffe17 	ldw	r2,-8(fp)
 8000cd8:	10da8060 	cmpeqi	r3,r2,27137
 8000cdc:	1800031e 	bne	r3,zero,8000cec <altera_avalon_jtag_uart_ioctl+0x38>
 8000ce0:	109a80a0 	cmpeqi	r2,r2,27138
 8000ce4:	1000181e 	bne	r2,zero,8000d48 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8000ce8:	00002906 	br	8000d90 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8000cec:	e0bffd17 	ldw	r2,-12(fp)
 8000cf0:	10c00117 	ldw	r3,4(r2)
 8000cf4:	00a00034 	movhi	r2,32768
 8000cf8:	10bfffc4 	addi	r2,r2,-1
 8000cfc:	18802126 	beq	r3,r2,8000d84 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8000d00:	e0bfff17 	ldw	r2,-4(fp)
 8000d04:	10800017 	ldw	r2,0(r2)
 8000d08:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8000d0c:	e0bffc17 	ldw	r2,-16(fp)
 8000d10:	10800090 	cmplti	r2,r2,2
 8000d14:	1000061e 	bne	r2,zero,8000d30 <altera_avalon_jtag_uart_ioctl+0x7c>
 8000d18:	e0fffc17 	ldw	r3,-16(fp)
 8000d1c:	00a00034 	movhi	r2,32768
 8000d20:	10bfffc4 	addi	r2,r2,-1
 8000d24:	18800226 	beq	r3,r2,8000d30 <altera_avalon_jtag_uart_ioctl+0x7c>
 8000d28:	e0bffc17 	ldw	r2,-16(fp)
 8000d2c:	00000206 	br	8000d38 <altera_avalon_jtag_uart_ioctl+0x84>
 8000d30:	00a00034 	movhi	r2,32768
 8000d34:	10bfff84 	addi	r2,r2,-2
 8000d38:	e0fffd17 	ldw	r3,-12(fp)
 8000d3c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8000d40:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8000d44:	00000f06 	br	8000d84 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8000d48:	e0bffd17 	ldw	r2,-12(fp)
 8000d4c:	10c00117 	ldw	r3,4(r2)
 8000d50:	00a00034 	movhi	r2,32768
 8000d54:	10bfffc4 	addi	r2,r2,-1
 8000d58:	18800c26 	beq	r3,r2,8000d8c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8000d5c:	e0bffd17 	ldw	r2,-12(fp)
 8000d60:	10c00917 	ldw	r3,36(r2)
 8000d64:	e0bffd17 	ldw	r2,-12(fp)
 8000d68:	10800117 	ldw	r2,4(r2)
 8000d6c:	1885803a 	cmpltu	r2,r3,r2
 8000d70:	10c03fcc 	andi	r3,r2,255
 8000d74:	e0bfff17 	ldw	r2,-4(fp)
 8000d78:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8000d7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8000d80:	00000206 	br	8000d8c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8000d84:	0001883a 	nop
 8000d88:	00000106 	br	8000d90 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8000d8c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8000d90:	e0bffb17 	ldw	r2,-20(fp)
}
 8000d94:	e037883a 	mov	sp,fp
 8000d98:	df000017 	ldw	fp,0(sp)
 8000d9c:	dec00104 	addi	sp,sp,4
 8000da0:	f800283a 	ret

08000da4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8000da4:	defff304 	addi	sp,sp,-52
 8000da8:	dfc00c15 	stw	ra,48(sp)
 8000dac:	df000b15 	stw	fp,44(sp)
 8000db0:	df000b04 	addi	fp,sp,44
 8000db4:	e13ffc15 	stw	r4,-16(fp)
 8000db8:	e17ffd15 	stw	r5,-12(fp)
 8000dbc:	e1bffe15 	stw	r6,-8(fp)
 8000dc0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8000dc4:	e0bffd17 	ldw	r2,-12(fp)
 8000dc8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8000dcc:	00004706 	br	8000eec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8000dd0:	e0bffc17 	ldw	r2,-16(fp)
 8000dd4:	10800a17 	ldw	r2,40(r2)
 8000dd8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8000ddc:	e0bffc17 	ldw	r2,-16(fp)
 8000de0:	10800b17 	ldw	r2,44(r2)
 8000de4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8000de8:	e0fff717 	ldw	r3,-36(fp)
 8000dec:	e0bff817 	ldw	r2,-32(fp)
 8000df0:	18800536 	bltu	r3,r2,8000e08 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8000df4:	e0fff717 	ldw	r3,-36(fp)
 8000df8:	e0bff817 	ldw	r2,-32(fp)
 8000dfc:	1885c83a 	sub	r2,r3,r2
 8000e00:	e0bff615 	stw	r2,-40(fp)
 8000e04:	00000406 	br	8000e18 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8000e08:	00c20004 	movi	r3,2048
 8000e0c:	e0bff817 	ldw	r2,-32(fp)
 8000e10:	1885c83a 	sub	r2,r3,r2
 8000e14:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8000e18:	e0bff617 	ldw	r2,-40(fp)
 8000e1c:	10001e26 	beq	r2,zero,8000e98 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8000e20:	e0fffe17 	ldw	r3,-8(fp)
 8000e24:	e0bff617 	ldw	r2,-40(fp)
 8000e28:	1880022e 	bgeu	r3,r2,8000e34 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8000e2c:	e0bffe17 	ldw	r2,-8(fp)
 8000e30:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8000e34:	e0bffc17 	ldw	r2,-16(fp)
 8000e38:	10c00e04 	addi	r3,r2,56
 8000e3c:	e0bff817 	ldw	r2,-32(fp)
 8000e40:	1885883a 	add	r2,r3,r2
 8000e44:	e1bff617 	ldw	r6,-40(fp)
 8000e48:	100b883a 	mov	r5,r2
 8000e4c:	e13ff517 	ldw	r4,-44(fp)
 8000e50:	80025540 	call	8002554 <memcpy>
      ptr   += n;
 8000e54:	e0fff517 	ldw	r3,-44(fp)
 8000e58:	e0bff617 	ldw	r2,-40(fp)
 8000e5c:	1885883a 	add	r2,r3,r2
 8000e60:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8000e64:	e0fffe17 	ldw	r3,-8(fp)
 8000e68:	e0bff617 	ldw	r2,-40(fp)
 8000e6c:	1885c83a 	sub	r2,r3,r2
 8000e70:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000e74:	e0fff817 	ldw	r3,-32(fp)
 8000e78:	e0bff617 	ldw	r2,-40(fp)
 8000e7c:	1885883a 	add	r2,r3,r2
 8000e80:	10c1ffcc 	andi	r3,r2,2047
 8000e84:	e0bffc17 	ldw	r2,-16(fp)
 8000e88:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8000e8c:	e0bffe17 	ldw	r2,-8(fp)
 8000e90:	00bfcf16 	blt	zero,r2,8000dd0 <__alt_exception_stack_pointer+0xf8000dd0>
 8000e94:	00000106 	br	8000e9c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8000e98:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8000e9c:	e0fff517 	ldw	r3,-44(fp)
 8000ea0:	e0bffd17 	ldw	r2,-12(fp)
 8000ea4:	1880141e 	bne	r3,r2,8000ef8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8000ea8:	e0bfff17 	ldw	r2,-4(fp)
 8000eac:	1090000c 	andi	r2,r2,16384
 8000eb0:	1000131e 	bne	r2,zero,8000f00 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8000eb4:	0001883a 	nop
 8000eb8:	e0bffc17 	ldw	r2,-16(fp)
 8000ebc:	10c00a17 	ldw	r3,40(r2)
 8000ec0:	e0bff717 	ldw	r2,-36(fp)
 8000ec4:	1880051e 	bne	r3,r2,8000edc <altera_avalon_jtag_uart_read+0x138>
 8000ec8:	e0bffc17 	ldw	r2,-16(fp)
 8000ecc:	10c00917 	ldw	r3,36(r2)
 8000ed0:	e0bffc17 	ldw	r2,-16(fp)
 8000ed4:	10800117 	ldw	r2,4(r2)
 8000ed8:	18bff736 	bltu	r3,r2,8000eb8 <__alt_exception_stack_pointer+0xf8000eb8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8000edc:	e0bffc17 	ldw	r2,-16(fp)
 8000ee0:	10c00a17 	ldw	r3,40(r2)
 8000ee4:	e0bff717 	ldw	r2,-36(fp)
 8000ee8:	18800726 	beq	r3,r2,8000f08 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8000eec:	e0bffe17 	ldw	r2,-8(fp)
 8000ef0:	00bfb716 	blt	zero,r2,8000dd0 <__alt_exception_stack_pointer+0xf8000dd0>
 8000ef4:	00000506 	br	8000f0c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8000ef8:	0001883a 	nop
 8000efc:	00000306 	br	8000f0c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8000f00:	0001883a 	nop
 8000f04:	00000106 	br	8000f0c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8000f08:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8000f0c:	e0fff517 	ldw	r3,-44(fp)
 8000f10:	e0bffd17 	ldw	r2,-12(fp)
 8000f14:	18801826 	beq	r3,r2,8000f78 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000f18:	0005303a 	rdctl	r2,status
 8000f1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000f20:	e0fffb17 	ldw	r3,-20(fp)
 8000f24:	00bfff84 	movi	r2,-2
 8000f28:	1884703a 	and	r2,r3,r2
 8000f2c:	1001703a 	wrctl	status,r2
  
  return context;
 8000f30:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8000f34:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000f38:	e0bffc17 	ldw	r2,-16(fp)
 8000f3c:	10800817 	ldw	r2,32(r2)
 8000f40:	10c00054 	ori	r3,r2,1
 8000f44:	e0bffc17 	ldw	r2,-16(fp)
 8000f48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000f4c:	e0bffc17 	ldw	r2,-16(fp)
 8000f50:	10800017 	ldw	r2,0(r2)
 8000f54:	10800104 	addi	r2,r2,4
 8000f58:	1007883a 	mov	r3,r2
 8000f5c:	e0bffc17 	ldw	r2,-16(fp)
 8000f60:	10800817 	ldw	r2,32(r2)
 8000f64:	18800035 	stwio	r2,0(r3)
 8000f68:	e0bffa17 	ldw	r2,-24(fp)
 8000f6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8000f70:	e0bff917 	ldw	r2,-28(fp)
 8000f74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8000f78:	e0fff517 	ldw	r3,-44(fp)
 8000f7c:	e0bffd17 	ldw	r2,-12(fp)
 8000f80:	18800426 	beq	r3,r2,8000f94 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8000f84:	e0fff517 	ldw	r3,-44(fp)
 8000f88:	e0bffd17 	ldw	r2,-12(fp)
 8000f8c:	1885c83a 	sub	r2,r3,r2
 8000f90:	00000606 	br	8000fac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8000f94:	e0bfff17 	ldw	r2,-4(fp)
 8000f98:	1090000c 	andi	r2,r2,16384
 8000f9c:	10000226 	beq	r2,zero,8000fa8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8000fa0:	00bffd44 	movi	r2,-11
 8000fa4:	00000106 	br	8000fac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8000fa8:	00bffec4 	movi	r2,-5
}
 8000fac:	e037883a 	mov	sp,fp
 8000fb0:	dfc00117 	ldw	ra,4(sp)
 8000fb4:	df000017 	ldw	fp,0(sp)
 8000fb8:	dec00204 	addi	sp,sp,8
 8000fbc:	f800283a 	ret

08000fc0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8000fc0:	defff304 	addi	sp,sp,-52
 8000fc4:	dfc00c15 	stw	ra,48(sp)
 8000fc8:	df000b15 	stw	fp,44(sp)
 8000fcc:	df000b04 	addi	fp,sp,44
 8000fd0:	e13ffc15 	stw	r4,-16(fp)
 8000fd4:	e17ffd15 	stw	r5,-12(fp)
 8000fd8:	e1bffe15 	stw	r6,-8(fp)
 8000fdc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8000fe0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8000fe4:	e0bffd17 	ldw	r2,-12(fp)
 8000fe8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8000fec:	00003706 	br	80010cc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8000ff0:	e0bffc17 	ldw	r2,-16(fp)
 8000ff4:	10800c17 	ldw	r2,48(r2)
 8000ff8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8000ffc:	e0bffc17 	ldw	r2,-16(fp)
 8001000:	10800d17 	ldw	r2,52(r2)
 8001004:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8001008:	e0fff917 	ldw	r3,-28(fp)
 800100c:	e0bff517 	ldw	r2,-44(fp)
 8001010:	1880062e 	bgeu	r3,r2,800102c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8001014:	e0fff517 	ldw	r3,-44(fp)
 8001018:	e0bff917 	ldw	r2,-28(fp)
 800101c:	1885c83a 	sub	r2,r3,r2
 8001020:	10bfffc4 	addi	r2,r2,-1
 8001024:	e0bff615 	stw	r2,-40(fp)
 8001028:	00000b06 	br	8001058 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800102c:	e0bff517 	ldw	r2,-44(fp)
 8001030:	10000526 	beq	r2,zero,8001048 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8001034:	00c20004 	movi	r3,2048
 8001038:	e0bff917 	ldw	r2,-28(fp)
 800103c:	1885c83a 	sub	r2,r3,r2
 8001040:	e0bff615 	stw	r2,-40(fp)
 8001044:	00000406 	br	8001058 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8001048:	00c1ffc4 	movi	r3,2047
 800104c:	e0bff917 	ldw	r2,-28(fp)
 8001050:	1885c83a 	sub	r2,r3,r2
 8001054:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8001058:	e0bff617 	ldw	r2,-40(fp)
 800105c:	10001e26 	beq	r2,zero,80010d8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8001060:	e0fffe17 	ldw	r3,-8(fp)
 8001064:	e0bff617 	ldw	r2,-40(fp)
 8001068:	1880022e 	bgeu	r3,r2,8001074 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800106c:	e0bffe17 	ldw	r2,-8(fp)
 8001070:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8001074:	e0bffc17 	ldw	r2,-16(fp)
 8001078:	10c20e04 	addi	r3,r2,2104
 800107c:	e0bff917 	ldw	r2,-28(fp)
 8001080:	1885883a 	add	r2,r3,r2
 8001084:	e1bff617 	ldw	r6,-40(fp)
 8001088:	e17ffd17 	ldw	r5,-12(fp)
 800108c:	1009883a 	mov	r4,r2
 8001090:	80025540 	call	8002554 <memcpy>
      ptr   += n;
 8001094:	e0fffd17 	ldw	r3,-12(fp)
 8001098:	e0bff617 	ldw	r2,-40(fp)
 800109c:	1885883a 	add	r2,r3,r2
 80010a0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80010a4:	e0fffe17 	ldw	r3,-8(fp)
 80010a8:	e0bff617 	ldw	r2,-40(fp)
 80010ac:	1885c83a 	sub	r2,r3,r2
 80010b0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80010b4:	e0fff917 	ldw	r3,-28(fp)
 80010b8:	e0bff617 	ldw	r2,-40(fp)
 80010bc:	1885883a 	add	r2,r3,r2
 80010c0:	10c1ffcc 	andi	r3,r2,2047
 80010c4:	e0bffc17 	ldw	r2,-16(fp)
 80010c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80010cc:	e0bffe17 	ldw	r2,-8(fp)
 80010d0:	00bfc716 	blt	zero,r2,8000ff0 <__alt_exception_stack_pointer+0xf8000ff0>
 80010d4:	00000106 	br	80010dc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80010d8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80010dc:	0005303a 	rdctl	r2,status
 80010e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80010e4:	e0fffb17 	ldw	r3,-20(fp)
 80010e8:	00bfff84 	movi	r2,-2
 80010ec:	1884703a 	and	r2,r3,r2
 80010f0:	1001703a 	wrctl	status,r2
  
  return context;
 80010f4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80010f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80010fc:	e0bffc17 	ldw	r2,-16(fp)
 8001100:	10800817 	ldw	r2,32(r2)
 8001104:	10c00094 	ori	r3,r2,2
 8001108:	e0bffc17 	ldw	r2,-16(fp)
 800110c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8001110:	e0bffc17 	ldw	r2,-16(fp)
 8001114:	10800017 	ldw	r2,0(r2)
 8001118:	10800104 	addi	r2,r2,4
 800111c:	1007883a 	mov	r3,r2
 8001120:	e0bffc17 	ldw	r2,-16(fp)
 8001124:	10800817 	ldw	r2,32(r2)
 8001128:	18800035 	stwio	r2,0(r3)
 800112c:	e0bffa17 	ldw	r2,-24(fp)
 8001130:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001134:	e0bff817 	ldw	r2,-32(fp)
 8001138:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800113c:	e0bffe17 	ldw	r2,-8(fp)
 8001140:	0080100e 	bge	zero,r2,8001184 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8001144:	e0bfff17 	ldw	r2,-4(fp)
 8001148:	1090000c 	andi	r2,r2,16384
 800114c:	1000101e 	bne	r2,zero,8001190 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8001150:	0001883a 	nop
 8001154:	e0bffc17 	ldw	r2,-16(fp)
 8001158:	10c00d17 	ldw	r3,52(r2)
 800115c:	e0bff517 	ldw	r2,-44(fp)
 8001160:	1880051e 	bne	r3,r2,8001178 <altera_avalon_jtag_uart_write+0x1b8>
 8001164:	e0bffc17 	ldw	r2,-16(fp)
 8001168:	10c00917 	ldw	r3,36(r2)
 800116c:	e0bffc17 	ldw	r2,-16(fp)
 8001170:	10800117 	ldw	r2,4(r2)
 8001174:	18bff736 	bltu	r3,r2,8001154 <__alt_exception_stack_pointer+0xf8001154>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8001178:	e0bffc17 	ldw	r2,-16(fp)
 800117c:	10800917 	ldw	r2,36(r2)
 8001180:	1000051e 	bne	r2,zero,8001198 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8001184:	e0bffe17 	ldw	r2,-8(fp)
 8001188:	00bfd016 	blt	zero,r2,80010cc <__alt_exception_stack_pointer+0xf80010cc>
 800118c:	00000306 	br	800119c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8001190:	0001883a 	nop
 8001194:	00000106 	br	800119c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8001198:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800119c:	e0fffd17 	ldw	r3,-12(fp)
 80011a0:	e0bff717 	ldw	r2,-36(fp)
 80011a4:	18800426 	beq	r3,r2,80011b8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80011a8:	e0fffd17 	ldw	r3,-12(fp)
 80011ac:	e0bff717 	ldw	r2,-36(fp)
 80011b0:	1885c83a 	sub	r2,r3,r2
 80011b4:	00000606 	br	80011d0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80011b8:	e0bfff17 	ldw	r2,-4(fp)
 80011bc:	1090000c 	andi	r2,r2,16384
 80011c0:	10000226 	beq	r2,zero,80011cc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80011c4:	00bffd44 	movi	r2,-11
 80011c8:	00000106 	br	80011d0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80011cc:	00bffec4 	movi	r2,-5
}
 80011d0:	e037883a 	mov	sp,fp
 80011d4:	dfc00117 	ldw	ra,4(sp)
 80011d8:	df000017 	ldw	fp,0(sp)
 80011dc:	dec00204 	addi	sp,sp,8
 80011e0:	f800283a 	ret

080011e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80011e4:	defff904 	addi	sp,sp,-28
 80011e8:	dfc00615 	stw	ra,24(sp)
 80011ec:	df000515 	stw	fp,20(sp)
 80011f0:	df000504 	addi	fp,sp,20
 80011f4:	e13ffe15 	stw	r4,-8(fp)
 80011f8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80011fc:	0007883a 	mov	r3,zero
 8001200:	e0bffe17 	ldw	r2,-8(fp)
 8001204:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8001208:	e0bffe17 	ldw	r2,-8(fp)
 800120c:	10800104 	addi	r2,r2,4
 8001210:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001214:	0005303a 	rdctl	r2,status
 8001218:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800121c:	e0fffc17 	ldw	r3,-16(fp)
 8001220:	00bfff84 	movi	r2,-2
 8001224:	1884703a 	and	r2,r3,r2
 8001228:	1001703a 	wrctl	status,r2
  
  return context;
 800122c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8001230:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 8001234:	80021880 	call	8002188 <alt_tick>
 8001238:	e0bffb17 	ldw	r2,-20(fp)
 800123c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001240:	e0bffd17 	ldw	r2,-12(fp)
 8001244:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8001248:	0001883a 	nop
 800124c:	e037883a 	mov	sp,fp
 8001250:	dfc00117 	ldw	ra,4(sp)
 8001254:	df000017 	ldw	fp,0(sp)
 8001258:	dec00204 	addi	sp,sp,8
 800125c:	f800283a 	ret

08001260 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8001260:	defff904 	addi	sp,sp,-28
 8001264:	dfc00615 	stw	ra,24(sp)
 8001268:	df000515 	stw	fp,20(sp)
 800126c:	df000504 	addi	fp,sp,20
 8001270:	e13ffc15 	stw	r4,-16(fp)
 8001274:	e17ffd15 	stw	r5,-12(fp)
 8001278:	e1bffe15 	stw	r6,-8(fp)
 800127c:	e1ffff15 	stw	r7,-4(fp)
 8001280:	e0bfff17 	ldw	r2,-4(fp)
 8001284:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8001288:	d0a4de17 	ldw	r2,-27784(gp)
 800128c:	1000021e 	bne	r2,zero,8001298 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8001290:	e0bffb17 	ldw	r2,-20(fp)
 8001294:	d0a4de15 	stw	r2,-27784(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8001298:	e0bffc17 	ldw	r2,-16(fp)
 800129c:	10800104 	addi	r2,r2,4
 80012a0:	00c001c4 	movi	r3,7
 80012a4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 80012a8:	01820034 	movhi	r6,2048
 80012ac:	31847904 	addi	r6,r6,4580
 80012b0:	e17ffc17 	ldw	r5,-16(fp)
 80012b4:	e13ffe17 	ldw	r4,-8(fp)
 80012b8:	8001cb40 	call	8001cb4 <alt_irq_register>
#endif  
}
 80012bc:	0001883a 	nop
 80012c0:	e037883a 	mov	sp,fp
 80012c4:	dfc00117 	ldw	ra,4(sp)
 80012c8:	df000017 	ldw	fp,0(sp)
 80012cc:	dec00204 	addi	sp,sp,8
 80012d0:	f800283a 	ret

080012d4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 80012d4:	defffd04 	addi	sp,sp,-12
 80012d8:	df000215 	stw	fp,8(sp)
 80012dc:	df000204 	addi	fp,sp,8
 80012e0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 80012e4:	e0bfff17 	ldw	r2,-4(fp)
 80012e8:	10800a17 	ldw	r2,40(r2)
 80012ec:	10800104 	addi	r2,r2,4
 80012f0:	10800037 	ldwio	r2,0(r2)
 80012f4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 80012f8:	e0bffe17 	ldw	r2,-8(fp)
 80012fc:	10800054 	ori	r2,r2,1
 8001300:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 8001304:	e0bfff17 	ldw	r2,-4(fp)
 8001308:	10800a17 	ldw	r2,40(r2)
 800130c:	10800104 	addi	r2,r2,4
 8001310:	1007883a 	mov	r3,r2
 8001314:	e0bffe17 	ldw	r2,-8(fp)
 8001318:	18800035 	stwio	r2,0(r3)
}
 800131c:	0001883a 	nop
 8001320:	e037883a 	mov	sp,fp
 8001324:	df000017 	ldw	fp,0(sp)
 8001328:	dec00104 	addi	sp,sp,4
 800132c:	f800283a 	ret

08001330 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 8001330:	defffd04 	addi	sp,sp,-12
 8001334:	df000215 	stw	fp,8(sp)
 8001338:	df000204 	addi	fp,sp,8
 800133c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 8001340:	e0bfff17 	ldw	r2,-4(fp)
 8001344:	10800a17 	ldw	r2,40(r2)
 8001348:	10800104 	addi	r2,r2,4
 800134c:	10800037 	ldwio	r2,0(r2)
 8001350:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 8001354:	e0fffe17 	ldw	r3,-8(fp)
 8001358:	00bfff84 	movi	r2,-2
 800135c:	1884703a 	and	r2,r3,r2
 8001360:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 8001364:	e0bfff17 	ldw	r2,-4(fp)
 8001368:	10800a17 	ldw	r2,40(r2)
 800136c:	10800104 	addi	r2,r2,4
 8001370:	1007883a 	mov	r3,r2
 8001374:	e0bffe17 	ldw	r2,-8(fp)
 8001378:	18800035 	stwio	r2,0(r3)
}
 800137c:	0001883a 	nop
 8001380:	e037883a 	mov	sp,fp
 8001384:	df000017 	ldw	fp,0(sp)
 8001388:	dec00104 	addi	sp,sp,4
 800138c:	f800283a 	ret

08001390 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 8001390:	defffd04 	addi	sp,sp,-12
 8001394:	df000215 	stw	fp,8(sp)
 8001398:	df000204 	addi	fp,sp,8
 800139c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 80013a0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 80013a4:	e0bfff17 	ldw	r2,-4(fp)
 80013a8:	10800a17 	ldw	r2,40(r2)
 80013ac:	10800084 	addi	r2,r2,2
 80013b0:	1080002b 	ldhuio	r2,0(r2)
 80013b4:	10bfffcc 	andi	r2,r2,65535
 80013b8:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 80013bc:	e0bffe0b 	ldhu	r2,-8(fp)
}
 80013c0:	e037883a 	mov	sp,fp
 80013c4:	df000017 	ldw	fp,0(sp)
 80013c8:	dec00104 	addi	sp,sp,4
 80013cc:	f800283a 	ret

080013d0 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 80013d0:	defffd04 	addi	sp,sp,-12
 80013d4:	df000215 	stw	fp,8(sp)
 80013d8:	df000204 	addi	fp,sp,8
 80013dc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 80013e0:	e0bfff17 	ldw	r2,-4(fp)
 80013e4:	10800a17 	ldw	r2,40(r2)
 80013e8:	10800104 	addi	r2,r2,4
 80013ec:	10800037 	ldwio	r2,0(r2)
 80013f0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 80013f4:	e0bffe17 	ldw	r2,-8(fp)
 80013f8:	1004d43a 	srli	r2,r2,16
}
 80013fc:	e037883a 	mov	sp,fp
 8001400:	df000017 	ldw	fp,0(sp)
 8001404:	dec00104 	addi	sp,sp,4
 8001408:	f800283a 	ret

0800140c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 800140c:	defffd04 	addi	sp,sp,-12
 8001410:	df000215 	stw	fp,8(sp)
 8001414:	df000204 	addi	fp,sp,8
 8001418:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 800141c:	e0bfff17 	ldw	r2,-4(fp)
 8001420:	1080800c 	andi	r2,r2,512
 8001424:	1004d27a 	srli	r2,r2,9
 8001428:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
 800142c:	e0bffe17 	ldw	r2,-8(fp)
 8001430:	10000226 	beq	r2,zero,800143c <alt_up_rs232_check_parity+0x30>
 8001434:	00bfffc4 	movi	r2,-1
 8001438:	00000106 	br	8001440 <alt_up_rs232_check_parity+0x34>
 800143c:	0005883a 	mov	r2,zero
}
 8001440:	e037883a 	mov	sp,fp
 8001444:	df000017 	ldw	fp,0(sp)
 8001448:	dec00104 	addi	sp,sp,4
 800144c:	f800283a 	ret

08001450 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 8001450:	defffd04 	addi	sp,sp,-12
 8001454:	df000215 	stw	fp,8(sp)
 8001458:	df000204 	addi	fp,sp,8
 800145c:	e13ffe15 	stw	r4,-8(fp)
 8001460:	2805883a 	mov	r2,r5
 8001464:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 8001468:	e0bffe17 	ldw	r2,-8(fp)
 800146c:	10800a17 	ldw	r2,40(r2)
 8001470:	1007883a 	mov	r3,r2
 8001474:	e0bfff03 	ldbu	r2,-4(fp)
 8001478:	18800035 	stwio	r2,0(r3)
	return 0;
 800147c:	0005883a 	mov	r2,zero
}
 8001480:	e037883a 	mov	sp,fp
 8001484:	df000017 	ldw	fp,0(sp)
 8001488:	dec00104 	addi	sp,sp,4
 800148c:	f800283a 	ret

08001490 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 8001490:	defffa04 	addi	sp,sp,-24
 8001494:	dfc00515 	stw	ra,20(sp)
 8001498:	df000415 	stw	fp,16(sp)
 800149c:	df000404 	addi	fp,sp,16
 80014a0:	e13ffd15 	stw	r4,-12(fp)
 80014a4:	e17ffe15 	stw	r5,-8(fp)
 80014a8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 80014ac:	e0bffd17 	ldw	r2,-12(fp)
 80014b0:	10800a17 	ldw	r2,40(r2)
 80014b4:	10800037 	ldwio	r2,0(r2)
 80014b8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 80014bc:	e0bffc17 	ldw	r2,-16(fp)
 80014c0:	1007883a 	mov	r3,r2
 80014c4:	e0bffe17 	ldw	r2,-8(fp)
 80014c8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 80014cc:	e13ffc17 	ldw	r4,-16(fp)
 80014d0:	800140c0 	call	800140c <alt_up_rs232_check_parity>
 80014d4:	1007883a 	mov	r3,r2
 80014d8:	e0bfff17 	ldw	r2,-4(fp)
 80014dc:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 80014e0:	e0bffc17 	ldw	r2,-16(fp)
 80014e4:	10a0000c 	andi	r2,r2,32768
 80014e8:	1004d3fa 	srli	r2,r2,15
 80014ec:	10bfffc4 	addi	r2,r2,-1
}
 80014f0:	e037883a 	mov	sp,fp
 80014f4:	dfc00117 	ldw	ra,4(sp)
 80014f8:	df000017 	ldw	fp,0(sp)
 80014fc:	dec00204 	addi	sp,sp,8
 8001500:	f800283a 	ret

08001504 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 8001504:	defff804 	addi	sp,sp,-32
 8001508:	dfc00715 	stw	ra,28(sp)
 800150c:	df000615 	stw	fp,24(sp)
 8001510:	df000604 	addi	fp,sp,24
 8001514:	e13ffd15 	stw	r4,-12(fp)
 8001518:	e17ffe15 	stw	r5,-8(fp)
 800151c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 8001520:	e0bffd17 	ldw	r2,-12(fp)
 8001524:	10800017 	ldw	r2,0(r2)
 8001528:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 800152c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 8001530:	00000c06 	br	8001564 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
 8001534:	e0bffe17 	ldw	r2,-8(fp)
 8001538:	10c00044 	addi	r3,r2,1
 800153c:	e0fffe15 	stw	r3,-8(fp)
 8001540:	e0fffc04 	addi	r3,fp,-16
 8001544:	180d883a 	mov	r6,r3
 8001548:	100b883a 	mov	r5,r2
 800154c:	e13ffb17 	ldw	r4,-20(fp)
 8001550:	80014900 	call	8001490 <alt_up_rs232_read_data>
 8001554:	1000081e 	bne	r2,zero,8001578 <alt_up_rs232_read_fd+0x74>
			count++;
 8001558:	e0bffa17 	ldw	r2,-24(fp)
 800155c:	10800044 	addi	r2,r2,1
 8001560:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 8001564:	e0bfff17 	ldw	r2,-4(fp)
 8001568:	10ffffc4 	addi	r3,r2,-1
 800156c:	e0ffff15 	stw	r3,-4(fp)
 8001570:	103ff01e 	bne	r2,zero,8001534 <__alt_exception_stack_pointer+0xf8001534>
 8001574:	00000106 	br	800157c <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
 8001578:	0001883a 	nop
	}
	return count;
 800157c:	e0bffa17 	ldw	r2,-24(fp)
}
 8001580:	e037883a 	mov	sp,fp
 8001584:	dfc00117 	ldw	ra,4(sp)
 8001588:	df000017 	ldw	fp,0(sp)
 800158c:	dec00204 	addi	sp,sp,8
 8001590:	f800283a 	ret

08001594 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 8001594:	defff904 	addi	sp,sp,-28
 8001598:	dfc00615 	stw	ra,24(sp)
 800159c:	df000515 	stw	fp,20(sp)
 80015a0:	df000504 	addi	fp,sp,20
 80015a4:	e13ffd15 	stw	r4,-12(fp)
 80015a8:	e17ffe15 	stw	r5,-8(fp)
 80015ac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 80015b0:	e0bffd17 	ldw	r2,-12(fp)
 80015b4:	10800017 	ldw	r2,0(r2)
 80015b8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 80015bc:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 80015c0:	00000d06 	br	80015f8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 80015c4:	e0bffe17 	ldw	r2,-8(fp)
 80015c8:	10800003 	ldbu	r2,0(r2)
 80015cc:	10803fcc 	andi	r2,r2,255
 80015d0:	100b883a 	mov	r5,r2
 80015d4:	e13ffc17 	ldw	r4,-16(fp)
 80015d8:	80014500 	call	8001450 <alt_up_rs232_write_data>
 80015dc:	10000b1e 	bne	r2,zero,800160c <alt_up_rs232_write_fd+0x78>
		{
			count++;
 80015e0:	e0bffb17 	ldw	r2,-20(fp)
 80015e4:	10800044 	addi	r2,r2,1
 80015e8:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 80015ec:	e0bffe17 	ldw	r2,-8(fp)
 80015f0:	10800044 	addi	r2,r2,1
 80015f4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 80015f8:	e0bfff17 	ldw	r2,-4(fp)
 80015fc:	10ffffc4 	addi	r3,r2,-1
 8001600:	e0ffff15 	stw	r3,-4(fp)
 8001604:	103fef1e 	bne	r2,zero,80015c4 <__alt_exception_stack_pointer+0xf80015c4>
 8001608:	00000106 	br	8001610 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
 800160c:	0001883a 	nop
	}
	return count;
 8001610:	e0bffb17 	ldw	r2,-20(fp)
}
 8001614:	e037883a 	mov	sp,fp
 8001618:	dfc00117 	ldw	ra,4(sp)
 800161c:	df000017 	ldw	fp,0(sp)
 8001620:	dec00204 	addi	sp,sp,8
 8001624:	f800283a 	ret

08001628 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 8001628:	defffc04 	addi	sp,sp,-16
 800162c:	dfc00315 	stw	ra,12(sp)
 8001630:	df000215 	stw	fp,8(sp)
 8001634:	df000204 	addi	fp,sp,8
 8001638:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 800163c:	d1600404 	addi	r5,gp,-32752
 8001640:	e13fff17 	ldw	r4,-4(fp)
 8001644:	8001ab00 	call	8001ab0 <alt_find_dev>
 8001648:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800164c:	e0bffe17 	ldw	r2,-8(fp)
}
 8001650:	e037883a 	mov	sp,fp
 8001654:	dfc00117 	ldw	ra,4(sp)
 8001658:	df000017 	ldw	fp,0(sp)
 800165c:	dec00204 	addi	sp,sp,8
 8001660:	f800283a 	ret

08001664 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8001664:	defff504 	addi	sp,sp,-44
 8001668:	df000a15 	stw	fp,40(sp)
 800166c:	df000a04 	addi	fp,sp,40
 8001670:	e13ffc15 	stw	r4,-16(fp)
 8001674:	e17ffd15 	stw	r5,-12(fp)
 8001678:	e1bffe15 	stw	r6,-8(fp)
 800167c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8001680:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001684:	d0a4de17 	ldw	r2,-27784(gp)
  
  if (alt_ticks_per_second ())
 8001688:	10003c26 	beq	r2,zero,800177c <alt_alarm_start+0x118>
  {
    if (alarm)
 800168c:	e0bffc17 	ldw	r2,-16(fp)
 8001690:	10003826 	beq	r2,zero,8001774 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8001694:	e0bffc17 	ldw	r2,-16(fp)
 8001698:	e0fffe17 	ldw	r3,-8(fp)
 800169c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80016a0:	e0bffc17 	ldw	r2,-16(fp)
 80016a4:	e0ffff17 	ldw	r3,-4(fp)
 80016a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80016ac:	0005303a 	rdctl	r2,status
 80016b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80016b4:	e0fff917 	ldw	r3,-28(fp)
 80016b8:	00bfff84 	movi	r2,-2
 80016bc:	1884703a 	and	r2,r3,r2
 80016c0:	1001703a 	wrctl	status,r2
  
  return context;
 80016c4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80016c8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80016cc:	d0a4df17 	ldw	r2,-27780(gp)
      
      current_nticks = alt_nticks();
 80016d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80016d4:	e0fffd17 	ldw	r3,-12(fp)
 80016d8:	e0bff617 	ldw	r2,-40(fp)
 80016dc:	1885883a 	add	r2,r3,r2
 80016e0:	10c00044 	addi	r3,r2,1
 80016e4:	e0bffc17 	ldw	r2,-16(fp)
 80016e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80016ec:	e0bffc17 	ldw	r2,-16(fp)
 80016f0:	10c00217 	ldw	r3,8(r2)
 80016f4:	e0bff617 	ldw	r2,-40(fp)
 80016f8:	1880042e 	bgeu	r3,r2,800170c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 80016fc:	e0bffc17 	ldw	r2,-16(fp)
 8001700:	00c00044 	movi	r3,1
 8001704:	10c00405 	stb	r3,16(r2)
 8001708:	00000206 	br	8001714 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800170c:	e0bffc17 	ldw	r2,-16(fp)
 8001710:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8001714:	e0bffc17 	ldw	r2,-16(fp)
 8001718:	d0e00804 	addi	r3,gp,-32736
 800171c:	e0fffa15 	stw	r3,-24(fp)
 8001720:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8001724:	e0bffb17 	ldw	r2,-20(fp)
 8001728:	e0fffa17 	ldw	r3,-24(fp)
 800172c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8001730:	e0bffa17 	ldw	r2,-24(fp)
 8001734:	10c00017 	ldw	r3,0(r2)
 8001738:	e0bffb17 	ldw	r2,-20(fp)
 800173c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8001740:	e0bffa17 	ldw	r2,-24(fp)
 8001744:	10800017 	ldw	r2,0(r2)
 8001748:	e0fffb17 	ldw	r3,-20(fp)
 800174c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8001750:	e0bffa17 	ldw	r2,-24(fp)
 8001754:	e0fffb17 	ldw	r3,-20(fp)
 8001758:	10c00015 	stw	r3,0(r2)
 800175c:	e0bff817 	ldw	r2,-32(fp)
 8001760:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001764:	e0bff717 	ldw	r2,-36(fp)
 8001768:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800176c:	0005883a 	mov	r2,zero
 8001770:	00000306 	br	8001780 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8001774:	00bffa84 	movi	r2,-22
 8001778:	00000106 	br	8001780 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800177c:	00bfde84 	movi	r2,-134
  }
}
 8001780:	e037883a 	mov	sp,fp
 8001784:	df000017 	ldw	fp,0(sp)
 8001788:	dec00104 	addi	sp,sp,4
 800178c:	f800283a 	ret

08001790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8001790:	defffe04 	addi	sp,sp,-8
 8001794:	dfc00115 	stw	ra,4(sp)
 8001798:	df000015 	stw	fp,0(sp)
 800179c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80017a0:	d0a00717 	ldw	r2,-32740(gp)
 80017a4:	10000326 	beq	r2,zero,80017b4 <alt_get_errno+0x24>
 80017a8:	d0a00717 	ldw	r2,-32740(gp)
 80017ac:	103ee83a 	callr	r2
 80017b0:	00000106 	br	80017b8 <alt_get_errno+0x28>
 80017b4:	d0a4d904 	addi	r2,gp,-27804
}
 80017b8:	e037883a 	mov	sp,fp
 80017bc:	dfc00117 	ldw	ra,4(sp)
 80017c0:	df000017 	ldw	fp,0(sp)
 80017c4:	dec00204 	addi	sp,sp,8
 80017c8:	f800283a 	ret

080017cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80017cc:	defffb04 	addi	sp,sp,-20
 80017d0:	dfc00415 	stw	ra,16(sp)
 80017d4:	df000315 	stw	fp,12(sp)
 80017d8:	df000304 	addi	fp,sp,12
 80017dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80017e0:	e0bfff17 	ldw	r2,-4(fp)
 80017e4:	10000616 	blt	r2,zero,8001800 <close+0x34>
 80017e8:	e0bfff17 	ldw	r2,-4(fp)
 80017ec:	10c00324 	muli	r3,r2,12
 80017f0:	00820034 	movhi	r2,2048
 80017f4:	108ea104 	addi	r2,r2,14980
 80017f8:	1885883a 	add	r2,r3,r2
 80017fc:	00000106 	br	8001804 <close+0x38>
 8001800:	0005883a 	mov	r2,zero
 8001804:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8001808:	e0bffd17 	ldw	r2,-12(fp)
 800180c:	10001926 	beq	r2,zero,8001874 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8001810:	e0bffd17 	ldw	r2,-12(fp)
 8001814:	10800017 	ldw	r2,0(r2)
 8001818:	10800417 	ldw	r2,16(r2)
 800181c:	10000626 	beq	r2,zero,8001838 <close+0x6c>
 8001820:	e0bffd17 	ldw	r2,-12(fp)
 8001824:	10800017 	ldw	r2,0(r2)
 8001828:	10800417 	ldw	r2,16(r2)
 800182c:	e13ffd17 	ldw	r4,-12(fp)
 8001830:	103ee83a 	callr	r2
 8001834:	00000106 	br	800183c <close+0x70>
 8001838:	0005883a 	mov	r2,zero
 800183c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8001840:	e13fff17 	ldw	r4,-4(fp)
 8001844:	80020880 	call	8002088 <alt_release_fd>
    if (rval < 0)
 8001848:	e0bffe17 	ldw	r2,-8(fp)
 800184c:	1000070e 	bge	r2,zero,800186c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8001850:	80017900 	call	8001790 <alt_get_errno>
 8001854:	1007883a 	mov	r3,r2
 8001858:	e0bffe17 	ldw	r2,-8(fp)
 800185c:	0085c83a 	sub	r2,zero,r2
 8001860:	18800015 	stw	r2,0(r3)
      return -1;
 8001864:	00bfffc4 	movi	r2,-1
 8001868:	00000706 	br	8001888 <close+0xbc>
    }
    return 0;
 800186c:	0005883a 	mov	r2,zero
 8001870:	00000506 	br	8001888 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8001874:	80017900 	call	8001790 <alt_get_errno>
 8001878:	1007883a 	mov	r3,r2
 800187c:	00801444 	movi	r2,81
 8001880:	18800015 	stw	r2,0(r3)
    return -1;
 8001884:	00bfffc4 	movi	r2,-1
  }
}
 8001888:	e037883a 	mov	sp,fp
 800188c:	dfc00117 	ldw	ra,4(sp)
 8001890:	df000017 	ldw	fp,0(sp)
 8001894:	dec00204 	addi	sp,sp,8
 8001898:	f800283a 	ret

0800189c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800189c:	defffe04 	addi	sp,sp,-8
 80018a0:	df000115 	stw	fp,4(sp)
 80018a4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80018a8:	e03fff15 	stw	zero,-4(fp)
 80018ac:	00000506 	br	80018c4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 80018b0:	e0bfff17 	ldw	r2,-4(fp)
 80018b4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80018b8:	e0bfff17 	ldw	r2,-4(fp)
 80018bc:	10800804 	addi	r2,r2,32
 80018c0:	e0bfff15 	stw	r2,-4(fp)
 80018c4:	e0bfff17 	ldw	r2,-4(fp)
 80018c8:	10820030 	cmpltui	r2,r2,2048
 80018cc:	103ff81e 	bne	r2,zero,80018b0 <__alt_exception_stack_pointer+0xf80018b0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80018d0:	0001883a 	nop
 80018d4:	e037883a 	mov	sp,fp
 80018d8:	df000017 	ldw	fp,0(sp)
 80018dc:	dec00104 	addi	sp,sp,4
 80018e0:	f800283a 	ret

080018e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80018e4:	defffc04 	addi	sp,sp,-16
 80018e8:	df000315 	stw	fp,12(sp)
 80018ec:	df000304 	addi	fp,sp,12
 80018f0:	e13ffd15 	stw	r4,-12(fp)
 80018f4:	e17ffe15 	stw	r5,-8(fp)
 80018f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80018fc:	e0bfff17 	ldw	r2,-4(fp)
}
 8001900:	e037883a 	mov	sp,fp
 8001904:	df000017 	ldw	fp,0(sp)
 8001908:	dec00104 	addi	sp,sp,4
 800190c:	f800283a 	ret

08001910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8001910:	defffe04 	addi	sp,sp,-8
 8001914:	dfc00115 	stw	ra,4(sp)
 8001918:	df000015 	stw	fp,0(sp)
 800191c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8001920:	d0a00717 	ldw	r2,-32740(gp)
 8001924:	10000326 	beq	r2,zero,8001934 <alt_get_errno+0x24>
 8001928:	d0a00717 	ldw	r2,-32740(gp)
 800192c:	103ee83a 	callr	r2
 8001930:	00000106 	br	8001938 <alt_get_errno+0x28>
 8001934:	d0a4d904 	addi	r2,gp,-27804
}
 8001938:	e037883a 	mov	sp,fp
 800193c:	dfc00117 	ldw	ra,4(sp)
 8001940:	df000017 	ldw	fp,0(sp)
 8001944:	dec00204 	addi	sp,sp,8
 8001948:	f800283a 	ret

0800194c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800194c:	defffa04 	addi	sp,sp,-24
 8001950:	dfc00515 	stw	ra,20(sp)
 8001954:	df000415 	stw	fp,16(sp)
 8001958:	df000404 	addi	fp,sp,16
 800195c:	e13ffe15 	stw	r4,-8(fp)
 8001960:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8001964:	e0bffe17 	ldw	r2,-8(fp)
 8001968:	10000326 	beq	r2,zero,8001978 <alt_dev_llist_insert+0x2c>
 800196c:	e0bffe17 	ldw	r2,-8(fp)
 8001970:	10800217 	ldw	r2,8(r2)
 8001974:	1000061e 	bne	r2,zero,8001990 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8001978:	80019100 	call	8001910 <alt_get_errno>
 800197c:	1007883a 	mov	r3,r2
 8001980:	00800584 	movi	r2,22
 8001984:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8001988:	00bffa84 	movi	r2,-22
 800198c:	00001306 	br	80019dc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8001990:	e0bffe17 	ldw	r2,-8(fp)
 8001994:	e0ffff17 	ldw	r3,-4(fp)
 8001998:	e0fffc15 	stw	r3,-16(fp)
 800199c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80019a0:	e0bffd17 	ldw	r2,-12(fp)
 80019a4:	e0fffc17 	ldw	r3,-16(fp)
 80019a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80019ac:	e0bffc17 	ldw	r2,-16(fp)
 80019b0:	10c00017 	ldw	r3,0(r2)
 80019b4:	e0bffd17 	ldw	r2,-12(fp)
 80019b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80019bc:	e0bffc17 	ldw	r2,-16(fp)
 80019c0:	10800017 	ldw	r2,0(r2)
 80019c4:	e0fffd17 	ldw	r3,-12(fp)
 80019c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80019cc:	e0bffc17 	ldw	r2,-16(fp)
 80019d0:	e0fffd17 	ldw	r3,-12(fp)
 80019d4:	10c00015 	stw	r3,0(r2)

  return 0;  
 80019d8:	0005883a 	mov	r2,zero
}
 80019dc:	e037883a 	mov	sp,fp
 80019e0:	dfc00117 	ldw	ra,4(sp)
 80019e4:	df000017 	ldw	fp,0(sp)
 80019e8:	dec00204 	addi	sp,sp,8
 80019ec:	f800283a 	ret

080019f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80019f0:	defffd04 	addi	sp,sp,-12
 80019f4:	dfc00215 	stw	ra,8(sp)
 80019f8:	df000115 	stw	fp,4(sp)
 80019fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8001a00:	00820034 	movhi	r2,2048
 8001a04:	108a2504 	addi	r2,r2,10388
 8001a08:	e0bfff15 	stw	r2,-4(fp)
 8001a0c:	00000606 	br	8001a28 <_do_ctors+0x38>
        (*ctor) (); 
 8001a10:	e0bfff17 	ldw	r2,-4(fp)
 8001a14:	10800017 	ldw	r2,0(r2)
 8001a18:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8001a1c:	e0bfff17 	ldw	r2,-4(fp)
 8001a20:	10bfff04 	addi	r2,r2,-4
 8001a24:	e0bfff15 	stw	r2,-4(fp)
 8001a28:	e0ffff17 	ldw	r3,-4(fp)
 8001a2c:	00820034 	movhi	r2,2048
 8001a30:	108a2604 	addi	r2,r2,10392
 8001a34:	18bff62e 	bgeu	r3,r2,8001a10 <__alt_exception_stack_pointer+0xf8001a10>
        (*ctor) (); 
}
 8001a38:	0001883a 	nop
 8001a3c:	e037883a 	mov	sp,fp
 8001a40:	dfc00117 	ldw	ra,4(sp)
 8001a44:	df000017 	ldw	fp,0(sp)
 8001a48:	dec00204 	addi	sp,sp,8
 8001a4c:	f800283a 	ret

08001a50 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8001a50:	defffd04 	addi	sp,sp,-12
 8001a54:	dfc00215 	stw	ra,8(sp)
 8001a58:	df000115 	stw	fp,4(sp)
 8001a5c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8001a60:	00820034 	movhi	r2,2048
 8001a64:	108a2504 	addi	r2,r2,10388
 8001a68:	e0bfff15 	stw	r2,-4(fp)
 8001a6c:	00000606 	br	8001a88 <_do_dtors+0x38>
        (*dtor) (); 
 8001a70:	e0bfff17 	ldw	r2,-4(fp)
 8001a74:	10800017 	ldw	r2,0(r2)
 8001a78:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8001a7c:	e0bfff17 	ldw	r2,-4(fp)
 8001a80:	10bfff04 	addi	r2,r2,-4
 8001a84:	e0bfff15 	stw	r2,-4(fp)
 8001a88:	e0ffff17 	ldw	r3,-4(fp)
 8001a8c:	00820034 	movhi	r2,2048
 8001a90:	108a2604 	addi	r2,r2,10392
 8001a94:	18bff62e 	bgeu	r3,r2,8001a70 <__alt_exception_stack_pointer+0xf8001a70>
        (*dtor) (); 
}
 8001a98:	0001883a 	nop
 8001a9c:	e037883a 	mov	sp,fp
 8001aa0:	dfc00117 	ldw	ra,4(sp)
 8001aa4:	df000017 	ldw	fp,0(sp)
 8001aa8:	dec00204 	addi	sp,sp,8
 8001aac:	f800283a 	ret

08001ab0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8001ab0:	defffa04 	addi	sp,sp,-24
 8001ab4:	dfc00515 	stw	ra,20(sp)
 8001ab8:	df000415 	stw	fp,16(sp)
 8001abc:	df000404 	addi	fp,sp,16
 8001ac0:	e13ffe15 	stw	r4,-8(fp)
 8001ac4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8001ac8:	e0bfff17 	ldw	r2,-4(fp)
 8001acc:	10800017 	ldw	r2,0(r2)
 8001ad0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8001ad4:	e13ffe17 	ldw	r4,-8(fp)
 8001ad8:	80002e40 	call	80002e4 <strlen>
 8001adc:	10800044 	addi	r2,r2,1
 8001ae0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8001ae4:	00000d06 	br	8001b1c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8001ae8:	e0bffc17 	ldw	r2,-16(fp)
 8001aec:	10800217 	ldw	r2,8(r2)
 8001af0:	e0fffd17 	ldw	r3,-12(fp)
 8001af4:	180d883a 	mov	r6,r3
 8001af8:	e17ffe17 	ldw	r5,-8(fp)
 8001afc:	1009883a 	mov	r4,r2
 8001b00:	80025240 	call	8002524 <memcmp>
 8001b04:	1000021e 	bne	r2,zero,8001b10 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8001b08:	e0bffc17 	ldw	r2,-16(fp)
 8001b0c:	00000706 	br	8001b2c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8001b10:	e0bffc17 	ldw	r2,-16(fp)
 8001b14:	10800017 	ldw	r2,0(r2)
 8001b18:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8001b1c:	e0fffc17 	ldw	r3,-16(fp)
 8001b20:	e0bfff17 	ldw	r2,-4(fp)
 8001b24:	18bff01e 	bne	r3,r2,8001ae8 <__alt_exception_stack_pointer+0xf8001ae8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8001b28:	0005883a 	mov	r2,zero
}
 8001b2c:	e037883a 	mov	sp,fp
 8001b30:	dfc00117 	ldw	ra,4(sp)
 8001b34:	df000017 	ldw	fp,0(sp)
 8001b38:	dec00204 	addi	sp,sp,8
 8001b3c:	f800283a 	ret

08001b40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8001b40:	defffe04 	addi	sp,sp,-8
 8001b44:	dfc00115 	stw	ra,4(sp)
 8001b48:	df000015 	stw	fp,0(sp)
 8001b4c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8001b50:	01440004 	movi	r5,4096
 8001b54:	0009883a 	mov	r4,zero
 8001b58:	80024600 	call	8002460 <alt_icache_flush>
#endif
}
 8001b5c:	0001883a 	nop
 8001b60:	e037883a 	mov	sp,fp
 8001b64:	dfc00117 	ldw	ra,4(sp)
 8001b68:	df000017 	ldw	fp,0(sp)
 8001b6c:	dec00204 	addi	sp,sp,8
 8001b70:	f800283a 	ret

08001b74 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8001b74:	defff904 	addi	sp,sp,-28
 8001b78:	dfc00615 	stw	ra,24(sp)
 8001b7c:	df000515 	stw	fp,20(sp)
 8001b80:	df000504 	addi	fp,sp,20
 8001b84:	e13ffc15 	stw	r4,-16(fp)
 8001b88:	e17ffd15 	stw	r5,-12(fp)
 8001b8c:	e1bffe15 	stw	r6,-8(fp)
 8001b90:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8001b94:	e1bfff17 	ldw	r6,-4(fp)
 8001b98:	e17ffe17 	ldw	r5,-8(fp)
 8001b9c:	e13ffd17 	ldw	r4,-12(fp)
 8001ba0:	8001f340 	call	8001f34 <open>
 8001ba4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8001ba8:	e0bffb17 	ldw	r2,-20(fp)
 8001bac:	10001c16 	blt	r2,zero,8001c20 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8001bb0:	00820034 	movhi	r2,2048
 8001bb4:	108ea104 	addi	r2,r2,14980
 8001bb8:	e0fffb17 	ldw	r3,-20(fp)
 8001bbc:	18c00324 	muli	r3,r3,12
 8001bc0:	10c5883a 	add	r2,r2,r3
 8001bc4:	10c00017 	ldw	r3,0(r2)
 8001bc8:	e0bffc17 	ldw	r2,-16(fp)
 8001bcc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8001bd0:	00820034 	movhi	r2,2048
 8001bd4:	108ea104 	addi	r2,r2,14980
 8001bd8:	e0fffb17 	ldw	r3,-20(fp)
 8001bdc:	18c00324 	muli	r3,r3,12
 8001be0:	10c5883a 	add	r2,r2,r3
 8001be4:	10800104 	addi	r2,r2,4
 8001be8:	10c00017 	ldw	r3,0(r2)
 8001bec:	e0bffc17 	ldw	r2,-16(fp)
 8001bf0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8001bf4:	00820034 	movhi	r2,2048
 8001bf8:	108ea104 	addi	r2,r2,14980
 8001bfc:	e0fffb17 	ldw	r3,-20(fp)
 8001c00:	18c00324 	muli	r3,r3,12
 8001c04:	10c5883a 	add	r2,r2,r3
 8001c08:	10800204 	addi	r2,r2,8
 8001c0c:	10c00017 	ldw	r3,0(r2)
 8001c10:	e0bffc17 	ldw	r2,-16(fp)
 8001c14:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8001c18:	e13ffb17 	ldw	r4,-20(fp)
 8001c1c:	80020880 	call	8002088 <alt_release_fd>
  }
} 
 8001c20:	0001883a 	nop
 8001c24:	e037883a 	mov	sp,fp
 8001c28:	dfc00117 	ldw	ra,4(sp)
 8001c2c:	df000017 	ldw	fp,0(sp)
 8001c30:	dec00204 	addi	sp,sp,8
 8001c34:	f800283a 	ret

08001c38 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8001c38:	defffb04 	addi	sp,sp,-20
 8001c3c:	dfc00415 	stw	ra,16(sp)
 8001c40:	df000315 	stw	fp,12(sp)
 8001c44:	df000304 	addi	fp,sp,12
 8001c48:	e13ffd15 	stw	r4,-12(fp)
 8001c4c:	e17ffe15 	stw	r5,-8(fp)
 8001c50:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8001c54:	01c07fc4 	movi	r7,511
 8001c58:	01800044 	movi	r6,1
 8001c5c:	e17ffd17 	ldw	r5,-12(fp)
 8001c60:	01020034 	movhi	r4,2048
 8001c64:	210ea404 	addi	r4,r4,14992
 8001c68:	8001b740 	call	8001b74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8001c6c:	01c07fc4 	movi	r7,511
 8001c70:	000d883a 	mov	r6,zero
 8001c74:	e17ffe17 	ldw	r5,-8(fp)
 8001c78:	01020034 	movhi	r4,2048
 8001c7c:	210ea104 	addi	r4,r4,14980
 8001c80:	8001b740 	call	8001b74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8001c84:	01c07fc4 	movi	r7,511
 8001c88:	01800044 	movi	r6,1
 8001c8c:	e17fff17 	ldw	r5,-4(fp)
 8001c90:	01020034 	movhi	r4,2048
 8001c94:	210ea704 	addi	r4,r4,15004
 8001c98:	8001b740 	call	8001b74 <alt_open_fd>
}  
 8001c9c:	0001883a 	nop
 8001ca0:	e037883a 	mov	sp,fp
 8001ca4:	dfc00117 	ldw	ra,4(sp)
 8001ca8:	df000017 	ldw	fp,0(sp)
 8001cac:	dec00204 	addi	sp,sp,8
 8001cb0:	f800283a 	ret

08001cb4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 8001cb4:	defff004 	addi	sp,sp,-64
 8001cb8:	df000f15 	stw	fp,60(sp)
 8001cbc:	df000f04 	addi	fp,sp,60
 8001cc0:	e13ffd15 	stw	r4,-12(fp)
 8001cc4:	e17ffe15 	stw	r5,-8(fp)
 8001cc8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 8001ccc:	00bffa84 	movi	r2,-22
 8001cd0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8001cd4:	e0bffd17 	ldw	r2,-12(fp)
 8001cd8:	10800828 	cmpgeui	r2,r2,32
 8001cdc:	1000501e 	bne	r2,zero,8001e20 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001ce0:	0005303a 	rdctl	r2,status
 8001ce4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001ce8:	e0fff617 	ldw	r3,-40(fp)
 8001cec:	00bfff84 	movi	r2,-2
 8001cf0:	1884703a 	and	r2,r3,r2
 8001cf4:	1001703a 	wrctl	status,r2
  
  return context;
 8001cf8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 8001cfc:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 8001d00:	00820034 	movhi	r2,2048
 8001d04:	1093e104 	addi	r2,r2,20356
 8001d08:	e0fffd17 	ldw	r3,-12(fp)
 8001d0c:	180690fa 	slli	r3,r3,3
 8001d10:	10c5883a 	add	r2,r2,r3
 8001d14:	e0ffff17 	ldw	r3,-4(fp)
 8001d18:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 8001d1c:	00820034 	movhi	r2,2048
 8001d20:	1093e104 	addi	r2,r2,20356
 8001d24:	e0fffd17 	ldw	r3,-12(fp)
 8001d28:	180690fa 	slli	r3,r3,3
 8001d2c:	10c5883a 	add	r2,r2,r3
 8001d30:	10800104 	addi	r2,r2,4
 8001d34:	e0fffe17 	ldw	r3,-8(fp)
 8001d38:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 8001d3c:	e0bfff17 	ldw	r2,-4(fp)
 8001d40:	10001926 	beq	r2,zero,8001da8 <alt_irq_register+0xf4>
 8001d44:	e0bffd17 	ldw	r2,-12(fp)
 8001d48:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001d4c:	0005303a 	rdctl	r2,status
 8001d50:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001d54:	e0fff717 	ldw	r3,-36(fp)
 8001d58:	00bfff84 	movi	r2,-2
 8001d5c:	1884703a 	and	r2,r3,r2
 8001d60:	1001703a 	wrctl	status,r2
  
  return context;
 8001d64:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8001d68:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 8001d6c:	00c00044 	movi	r3,1
 8001d70:	e0bff217 	ldw	r2,-56(fp)
 8001d74:	1884983a 	sll	r2,r3,r2
 8001d78:	1007883a 	mov	r3,r2
 8001d7c:	d0a4dd17 	ldw	r2,-27788(gp)
 8001d80:	1884b03a 	or	r2,r3,r2
 8001d84:	d0a4dd15 	stw	r2,-27788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8001d88:	d0a4dd17 	ldw	r2,-27788(gp)
 8001d8c:	100170fa 	wrctl	ienable,r2
 8001d90:	e0bff817 	ldw	r2,-32(fp)
 8001d94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001d98:	e0bff917 	ldw	r2,-28(fp)
 8001d9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8001da0:	0005883a 	mov	r2,zero
 8001da4:	00001906 	br	8001e0c <alt_irq_register+0x158>
 8001da8:	e0bffd17 	ldw	r2,-12(fp)
 8001dac:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001db0:	0005303a 	rdctl	r2,status
 8001db4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001db8:	e0fffa17 	ldw	r3,-24(fp)
 8001dbc:	00bfff84 	movi	r2,-2
 8001dc0:	1884703a 	and	r2,r3,r2
 8001dc4:	1001703a 	wrctl	status,r2
  
  return context;
 8001dc8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8001dcc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 8001dd0:	00c00044 	movi	r3,1
 8001dd4:	e0bff417 	ldw	r2,-48(fp)
 8001dd8:	1884983a 	sll	r2,r3,r2
 8001ddc:	0084303a 	nor	r2,zero,r2
 8001de0:	1007883a 	mov	r3,r2
 8001de4:	d0a4dd17 	ldw	r2,-27788(gp)
 8001de8:	1884703a 	and	r2,r3,r2
 8001dec:	d0a4dd15 	stw	r2,-27788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8001df0:	d0a4dd17 	ldw	r2,-27788(gp)
 8001df4:	100170fa 	wrctl	ienable,r2
 8001df8:	e0bffb17 	ldw	r2,-20(fp)
 8001dfc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001e00:	e0bffc17 	ldw	r2,-16(fp)
 8001e04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8001e08:	0005883a 	mov	r2,zero
 8001e0c:	e0bff115 	stw	r2,-60(fp)
 8001e10:	e0bff317 	ldw	r2,-52(fp)
 8001e14:	e0bff515 	stw	r2,-44(fp)
 8001e18:	e0bff517 	ldw	r2,-44(fp)
 8001e1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 8001e20:	e0bff117 	ldw	r2,-60(fp)
}
 8001e24:	e037883a 	mov	sp,fp
 8001e28:	df000017 	ldw	fp,0(sp)
 8001e2c:	dec00104 	addi	sp,sp,4
 8001e30:	f800283a 	ret

08001e34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8001e34:	defffe04 	addi	sp,sp,-8
 8001e38:	dfc00115 	stw	ra,4(sp)
 8001e3c:	df000015 	stw	fp,0(sp)
 8001e40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8001e44:	d0a00717 	ldw	r2,-32740(gp)
 8001e48:	10000326 	beq	r2,zero,8001e58 <alt_get_errno+0x24>
 8001e4c:	d0a00717 	ldw	r2,-32740(gp)
 8001e50:	103ee83a 	callr	r2
 8001e54:	00000106 	br	8001e5c <alt_get_errno+0x28>
 8001e58:	d0a4d904 	addi	r2,gp,-27804
}
 8001e5c:	e037883a 	mov	sp,fp
 8001e60:	dfc00117 	ldw	ra,4(sp)
 8001e64:	df000017 	ldw	fp,0(sp)
 8001e68:	dec00204 	addi	sp,sp,8
 8001e6c:	f800283a 	ret

08001e70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8001e70:	defffd04 	addi	sp,sp,-12
 8001e74:	df000215 	stw	fp,8(sp)
 8001e78:	df000204 	addi	fp,sp,8
 8001e7c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8001e80:	e0bfff17 	ldw	r2,-4(fp)
 8001e84:	10800217 	ldw	r2,8(r2)
 8001e88:	10d00034 	orhi	r3,r2,16384
 8001e8c:	e0bfff17 	ldw	r2,-4(fp)
 8001e90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8001e94:	e03ffe15 	stw	zero,-8(fp)
 8001e98:	00001d06 	br	8001f10 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8001e9c:	00820034 	movhi	r2,2048
 8001ea0:	108ea104 	addi	r2,r2,14980
 8001ea4:	e0fffe17 	ldw	r3,-8(fp)
 8001ea8:	18c00324 	muli	r3,r3,12
 8001eac:	10c5883a 	add	r2,r2,r3
 8001eb0:	10c00017 	ldw	r3,0(r2)
 8001eb4:	e0bfff17 	ldw	r2,-4(fp)
 8001eb8:	10800017 	ldw	r2,0(r2)
 8001ebc:	1880111e 	bne	r3,r2,8001f04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8001ec0:	00820034 	movhi	r2,2048
 8001ec4:	108ea104 	addi	r2,r2,14980
 8001ec8:	e0fffe17 	ldw	r3,-8(fp)
 8001ecc:	18c00324 	muli	r3,r3,12
 8001ed0:	10c5883a 	add	r2,r2,r3
 8001ed4:	10800204 	addi	r2,r2,8
 8001ed8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8001edc:	1000090e 	bge	r2,zero,8001f04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8001ee0:	e0bffe17 	ldw	r2,-8(fp)
 8001ee4:	10c00324 	muli	r3,r2,12
 8001ee8:	00820034 	movhi	r2,2048
 8001eec:	108ea104 	addi	r2,r2,14980
 8001ef0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8001ef4:	e0bfff17 	ldw	r2,-4(fp)
 8001ef8:	18800226 	beq	r3,r2,8001f04 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8001efc:	00bffcc4 	movi	r2,-13
 8001f00:	00000806 	br	8001f24 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8001f04:	e0bffe17 	ldw	r2,-8(fp)
 8001f08:	10800044 	addi	r2,r2,1
 8001f0c:	e0bffe15 	stw	r2,-8(fp)
 8001f10:	d0a00617 	ldw	r2,-32744(gp)
 8001f14:	1007883a 	mov	r3,r2
 8001f18:	e0bffe17 	ldw	r2,-8(fp)
 8001f1c:	18bfdf2e 	bgeu	r3,r2,8001e9c <__alt_exception_stack_pointer+0xf8001e9c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8001f20:	0005883a 	mov	r2,zero
}
 8001f24:	e037883a 	mov	sp,fp
 8001f28:	df000017 	ldw	fp,0(sp)
 8001f2c:	dec00104 	addi	sp,sp,4
 8001f30:	f800283a 	ret

08001f34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8001f34:	defff604 	addi	sp,sp,-40
 8001f38:	dfc00915 	stw	ra,36(sp)
 8001f3c:	df000815 	stw	fp,32(sp)
 8001f40:	df000804 	addi	fp,sp,32
 8001f44:	e13ffd15 	stw	r4,-12(fp)
 8001f48:	e17ffe15 	stw	r5,-8(fp)
 8001f4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8001f50:	00bfffc4 	movi	r2,-1
 8001f54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8001f58:	00bffb44 	movi	r2,-19
 8001f5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8001f60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8001f64:	d1600404 	addi	r5,gp,-32752
 8001f68:	e13ffd17 	ldw	r4,-12(fp)
 8001f6c:	8001ab00 	call	8001ab0 <alt_find_dev>
 8001f70:	e0bff815 	stw	r2,-32(fp)
 8001f74:	e0bff817 	ldw	r2,-32(fp)
 8001f78:	1000051e 	bne	r2,zero,8001f90 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8001f7c:	e13ffd17 	ldw	r4,-12(fp)
 8001f80:	80022b40 	call	80022b4 <alt_find_file>
 8001f84:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8001f88:	00800044 	movi	r2,1
 8001f8c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8001f90:	e0bff817 	ldw	r2,-32(fp)
 8001f94:	10002926 	beq	r2,zero,800203c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8001f98:	e13ff817 	ldw	r4,-32(fp)
 8001f9c:	80023bc0 	call	80023bc <alt_get_fd>
 8001fa0:	e0bff915 	stw	r2,-28(fp)
 8001fa4:	e0bff917 	ldw	r2,-28(fp)
 8001fa8:	1000030e 	bge	r2,zero,8001fb8 <open+0x84>
    {
      status = index;
 8001fac:	e0bff917 	ldw	r2,-28(fp)
 8001fb0:	e0bffa15 	stw	r2,-24(fp)
 8001fb4:	00002306 	br	8002044 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8001fb8:	e0bff917 	ldw	r2,-28(fp)
 8001fbc:	10c00324 	muli	r3,r2,12
 8001fc0:	00820034 	movhi	r2,2048
 8001fc4:	108ea104 	addi	r2,r2,14980
 8001fc8:	1885883a 	add	r2,r3,r2
 8001fcc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8001fd0:	e0fffe17 	ldw	r3,-8(fp)
 8001fd4:	00900034 	movhi	r2,16384
 8001fd8:	10bfffc4 	addi	r2,r2,-1
 8001fdc:	1886703a 	and	r3,r3,r2
 8001fe0:	e0bffc17 	ldw	r2,-16(fp)
 8001fe4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8001fe8:	e0bffb17 	ldw	r2,-20(fp)
 8001fec:	1000051e 	bne	r2,zero,8002004 <open+0xd0>
 8001ff0:	e13ffc17 	ldw	r4,-16(fp)
 8001ff4:	8001e700 	call	8001e70 <alt_file_locked>
 8001ff8:	e0bffa15 	stw	r2,-24(fp)
 8001ffc:	e0bffa17 	ldw	r2,-24(fp)
 8002000:	10001016 	blt	r2,zero,8002044 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8002004:	e0bff817 	ldw	r2,-32(fp)
 8002008:	10800317 	ldw	r2,12(r2)
 800200c:	10000826 	beq	r2,zero,8002030 <open+0xfc>
 8002010:	e0bff817 	ldw	r2,-32(fp)
 8002014:	10800317 	ldw	r2,12(r2)
 8002018:	e1ffff17 	ldw	r7,-4(fp)
 800201c:	e1bffe17 	ldw	r6,-8(fp)
 8002020:	e17ffd17 	ldw	r5,-12(fp)
 8002024:	e13ffc17 	ldw	r4,-16(fp)
 8002028:	103ee83a 	callr	r2
 800202c:	00000106 	br	8002034 <open+0x100>
 8002030:	0005883a 	mov	r2,zero
 8002034:	e0bffa15 	stw	r2,-24(fp)
 8002038:	00000206 	br	8002044 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800203c:	00bffb44 	movi	r2,-19
 8002040:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8002044:	e0bffa17 	ldw	r2,-24(fp)
 8002048:	1000090e 	bge	r2,zero,8002070 <open+0x13c>
  {
    alt_release_fd (index);  
 800204c:	e13ff917 	ldw	r4,-28(fp)
 8002050:	80020880 	call	8002088 <alt_release_fd>
    ALT_ERRNO = -status;
 8002054:	8001e340 	call	8001e34 <alt_get_errno>
 8002058:	1007883a 	mov	r3,r2
 800205c:	e0bffa17 	ldw	r2,-24(fp)
 8002060:	0085c83a 	sub	r2,zero,r2
 8002064:	18800015 	stw	r2,0(r3)
    return -1;
 8002068:	00bfffc4 	movi	r2,-1
 800206c:	00000106 	br	8002074 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 8002070:	e0bff917 	ldw	r2,-28(fp)
}
 8002074:	e037883a 	mov	sp,fp
 8002078:	dfc00117 	ldw	ra,4(sp)
 800207c:	df000017 	ldw	fp,0(sp)
 8002080:	dec00204 	addi	sp,sp,8
 8002084:	f800283a 	ret

08002088 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8002088:	defffe04 	addi	sp,sp,-8
 800208c:	df000115 	stw	fp,4(sp)
 8002090:	df000104 	addi	fp,sp,4
 8002094:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8002098:	e0bfff17 	ldw	r2,-4(fp)
 800209c:	108000d0 	cmplti	r2,r2,3
 80020a0:	10000d1e 	bne	r2,zero,80020d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 80020a4:	00820034 	movhi	r2,2048
 80020a8:	108ea104 	addi	r2,r2,14980
 80020ac:	e0ffff17 	ldw	r3,-4(fp)
 80020b0:	18c00324 	muli	r3,r3,12
 80020b4:	10c5883a 	add	r2,r2,r3
 80020b8:	10800204 	addi	r2,r2,8
 80020bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80020c0:	00820034 	movhi	r2,2048
 80020c4:	108ea104 	addi	r2,r2,14980
 80020c8:	e0ffff17 	ldw	r3,-4(fp)
 80020cc:	18c00324 	muli	r3,r3,12
 80020d0:	10c5883a 	add	r2,r2,r3
 80020d4:	10000015 	stw	zero,0(r2)
  }
}
 80020d8:	0001883a 	nop
 80020dc:	e037883a 	mov	sp,fp
 80020e0:	df000017 	ldw	fp,0(sp)
 80020e4:	dec00104 	addi	sp,sp,4
 80020e8:	f800283a 	ret

080020ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80020ec:	defffa04 	addi	sp,sp,-24
 80020f0:	df000515 	stw	fp,20(sp)
 80020f4:	df000504 	addi	fp,sp,20
 80020f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80020fc:	0005303a 	rdctl	r2,status
 8002100:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002104:	e0fffc17 	ldw	r3,-16(fp)
 8002108:	00bfff84 	movi	r2,-2
 800210c:	1884703a 	and	r2,r3,r2
 8002110:	1001703a 	wrctl	status,r2
  
  return context;
 8002114:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8002118:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800211c:	e0bfff17 	ldw	r2,-4(fp)
 8002120:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8002124:	e0bffd17 	ldw	r2,-12(fp)
 8002128:	10800017 	ldw	r2,0(r2)
 800212c:	e0fffd17 	ldw	r3,-12(fp)
 8002130:	18c00117 	ldw	r3,4(r3)
 8002134:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8002138:	e0bffd17 	ldw	r2,-12(fp)
 800213c:	10800117 	ldw	r2,4(r2)
 8002140:	e0fffd17 	ldw	r3,-12(fp)
 8002144:	18c00017 	ldw	r3,0(r3)
 8002148:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800214c:	e0bffd17 	ldw	r2,-12(fp)
 8002150:	e0fffd17 	ldw	r3,-12(fp)
 8002154:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8002158:	e0bffd17 	ldw	r2,-12(fp)
 800215c:	e0fffd17 	ldw	r3,-12(fp)
 8002160:	10c00015 	stw	r3,0(r2)
 8002164:	e0bffb17 	ldw	r2,-20(fp)
 8002168:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800216c:	e0bffe17 	ldw	r2,-8(fp)
 8002170:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8002174:	0001883a 	nop
 8002178:	e037883a 	mov	sp,fp
 800217c:	df000017 	ldw	fp,0(sp)
 8002180:	dec00104 	addi	sp,sp,4
 8002184:	f800283a 	ret

08002188 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8002188:	defffb04 	addi	sp,sp,-20
 800218c:	dfc00415 	stw	ra,16(sp)
 8002190:	df000315 	stw	fp,12(sp)
 8002194:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8002198:	d0a00817 	ldw	r2,-32736(gp)
 800219c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80021a0:	d0a4df17 	ldw	r2,-27780(gp)
 80021a4:	10800044 	addi	r2,r2,1
 80021a8:	d0a4df15 	stw	r2,-27780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80021ac:	00002e06 	br	8002268 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80021b0:	e0bffd17 	ldw	r2,-12(fp)
 80021b4:	10800017 	ldw	r2,0(r2)
 80021b8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80021bc:	e0bffd17 	ldw	r2,-12(fp)
 80021c0:	10800403 	ldbu	r2,16(r2)
 80021c4:	10803fcc 	andi	r2,r2,255
 80021c8:	10000426 	beq	r2,zero,80021dc <alt_tick+0x54>
 80021cc:	d0a4df17 	ldw	r2,-27780(gp)
 80021d0:	1000021e 	bne	r2,zero,80021dc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80021d4:	e0bffd17 	ldw	r2,-12(fp)
 80021d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80021dc:	e0bffd17 	ldw	r2,-12(fp)
 80021e0:	10800217 	ldw	r2,8(r2)
 80021e4:	d0e4df17 	ldw	r3,-27780(gp)
 80021e8:	18801d36 	bltu	r3,r2,8002260 <alt_tick+0xd8>
 80021ec:	e0bffd17 	ldw	r2,-12(fp)
 80021f0:	10800403 	ldbu	r2,16(r2)
 80021f4:	10803fcc 	andi	r2,r2,255
 80021f8:	1000191e 	bne	r2,zero,8002260 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80021fc:	e0bffd17 	ldw	r2,-12(fp)
 8002200:	10800317 	ldw	r2,12(r2)
 8002204:	e0fffd17 	ldw	r3,-12(fp)
 8002208:	18c00517 	ldw	r3,20(r3)
 800220c:	1809883a 	mov	r4,r3
 8002210:	103ee83a 	callr	r2
 8002214:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8002218:	e0bfff17 	ldw	r2,-4(fp)
 800221c:	1000031e 	bne	r2,zero,800222c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8002220:	e13ffd17 	ldw	r4,-12(fp)
 8002224:	80020ec0 	call	80020ec <alt_alarm_stop>
 8002228:	00000d06 	br	8002260 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800222c:	e0bffd17 	ldw	r2,-12(fp)
 8002230:	10c00217 	ldw	r3,8(r2)
 8002234:	e0bfff17 	ldw	r2,-4(fp)
 8002238:	1887883a 	add	r3,r3,r2
 800223c:	e0bffd17 	ldw	r2,-12(fp)
 8002240:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8002244:	e0bffd17 	ldw	r2,-12(fp)
 8002248:	10c00217 	ldw	r3,8(r2)
 800224c:	d0a4df17 	ldw	r2,-27780(gp)
 8002250:	1880032e 	bgeu	r3,r2,8002260 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8002254:	e0bffd17 	ldw	r2,-12(fp)
 8002258:	00c00044 	movi	r3,1
 800225c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8002260:	e0bffe17 	ldw	r2,-8(fp)
 8002264:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8002268:	e0fffd17 	ldw	r3,-12(fp)
 800226c:	d0a00804 	addi	r2,gp,-32736
 8002270:	18bfcf1e 	bne	r3,r2,80021b0 <__alt_exception_stack_pointer+0xf80021b0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8002274:	0001883a 	nop
}
 8002278:	0001883a 	nop
 800227c:	e037883a 	mov	sp,fp
 8002280:	dfc00117 	ldw	ra,4(sp)
 8002284:	df000017 	ldw	fp,0(sp)
 8002288:	dec00204 	addi	sp,sp,8
 800228c:	f800283a 	ret

08002290 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8002290:	deffff04 	addi	sp,sp,-4
 8002294:	df000015 	stw	fp,0(sp)
 8002298:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800229c:	000170fa 	wrctl	ienable,zero
}
 80022a0:	0001883a 	nop
 80022a4:	e037883a 	mov	sp,fp
 80022a8:	df000017 	ldw	fp,0(sp)
 80022ac:	dec00104 	addi	sp,sp,4
 80022b0:	f800283a 	ret

080022b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80022b4:	defffb04 	addi	sp,sp,-20
 80022b8:	dfc00415 	stw	ra,16(sp)
 80022bc:	df000315 	stw	fp,12(sp)
 80022c0:	df000304 	addi	fp,sp,12
 80022c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80022c8:	d0a00217 	ldw	r2,-32760(gp)
 80022cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80022d0:	00003106 	br	8002398 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80022d4:	e0bffd17 	ldw	r2,-12(fp)
 80022d8:	10800217 	ldw	r2,8(r2)
 80022dc:	1009883a 	mov	r4,r2
 80022e0:	80002e40 	call	80002e4 <strlen>
 80022e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80022e8:	e0bffd17 	ldw	r2,-12(fp)
 80022ec:	10c00217 	ldw	r3,8(r2)
 80022f0:	e0bffe17 	ldw	r2,-8(fp)
 80022f4:	10bfffc4 	addi	r2,r2,-1
 80022f8:	1885883a 	add	r2,r3,r2
 80022fc:	10800003 	ldbu	r2,0(r2)
 8002300:	10803fcc 	andi	r2,r2,255
 8002304:	1080201c 	xori	r2,r2,128
 8002308:	10bfe004 	addi	r2,r2,-128
 800230c:	10800bd8 	cmpnei	r2,r2,47
 8002310:	1000031e 	bne	r2,zero,8002320 <alt_find_file+0x6c>
    {
      len -= 1;
 8002314:	e0bffe17 	ldw	r2,-8(fp)
 8002318:	10bfffc4 	addi	r2,r2,-1
 800231c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8002320:	e0bffe17 	ldw	r2,-8(fp)
 8002324:	e0ffff17 	ldw	r3,-4(fp)
 8002328:	1885883a 	add	r2,r3,r2
 800232c:	10800003 	ldbu	r2,0(r2)
 8002330:	10803fcc 	andi	r2,r2,255
 8002334:	1080201c 	xori	r2,r2,128
 8002338:	10bfe004 	addi	r2,r2,-128
 800233c:	10800be0 	cmpeqi	r2,r2,47
 8002340:	1000081e 	bne	r2,zero,8002364 <alt_find_file+0xb0>
 8002344:	e0bffe17 	ldw	r2,-8(fp)
 8002348:	e0ffff17 	ldw	r3,-4(fp)
 800234c:	1885883a 	add	r2,r3,r2
 8002350:	10800003 	ldbu	r2,0(r2)
 8002354:	10803fcc 	andi	r2,r2,255
 8002358:	1080201c 	xori	r2,r2,128
 800235c:	10bfe004 	addi	r2,r2,-128
 8002360:	10000a1e 	bne	r2,zero,800238c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8002364:	e0bffd17 	ldw	r2,-12(fp)
 8002368:	10800217 	ldw	r2,8(r2)
 800236c:	e0fffe17 	ldw	r3,-8(fp)
 8002370:	180d883a 	mov	r6,r3
 8002374:	e17fff17 	ldw	r5,-4(fp)
 8002378:	1009883a 	mov	r4,r2
 800237c:	80025240 	call	8002524 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8002380:	1000021e 	bne	r2,zero,800238c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8002384:	e0bffd17 	ldw	r2,-12(fp)
 8002388:	00000706 	br	80023a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800238c:	e0bffd17 	ldw	r2,-12(fp)
 8002390:	10800017 	ldw	r2,0(r2)
 8002394:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8002398:	e0fffd17 	ldw	r3,-12(fp)
 800239c:	d0a00204 	addi	r2,gp,-32760
 80023a0:	18bfcc1e 	bne	r3,r2,80022d4 <__alt_exception_stack_pointer+0xf80022d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80023a4:	0005883a 	mov	r2,zero
}
 80023a8:	e037883a 	mov	sp,fp
 80023ac:	dfc00117 	ldw	ra,4(sp)
 80023b0:	df000017 	ldw	fp,0(sp)
 80023b4:	dec00204 	addi	sp,sp,8
 80023b8:	f800283a 	ret

080023bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80023bc:	defffc04 	addi	sp,sp,-16
 80023c0:	df000315 	stw	fp,12(sp)
 80023c4:	df000304 	addi	fp,sp,12
 80023c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80023cc:	00bffa04 	movi	r2,-24
 80023d0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80023d4:	e03ffd15 	stw	zero,-12(fp)
 80023d8:	00001906 	br	8002440 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 80023dc:	00820034 	movhi	r2,2048
 80023e0:	108ea104 	addi	r2,r2,14980
 80023e4:	e0fffd17 	ldw	r3,-12(fp)
 80023e8:	18c00324 	muli	r3,r3,12
 80023ec:	10c5883a 	add	r2,r2,r3
 80023f0:	10800017 	ldw	r2,0(r2)
 80023f4:	10000f1e 	bne	r2,zero,8002434 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 80023f8:	00820034 	movhi	r2,2048
 80023fc:	108ea104 	addi	r2,r2,14980
 8002400:	e0fffd17 	ldw	r3,-12(fp)
 8002404:	18c00324 	muli	r3,r3,12
 8002408:	10c5883a 	add	r2,r2,r3
 800240c:	e0ffff17 	ldw	r3,-4(fp)
 8002410:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8002414:	d0e00617 	ldw	r3,-32744(gp)
 8002418:	e0bffd17 	ldw	r2,-12(fp)
 800241c:	1880020e 	bge	r3,r2,8002428 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8002420:	e0bffd17 	ldw	r2,-12(fp)
 8002424:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
 8002428:	e0bffd17 	ldw	r2,-12(fp)
 800242c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8002430:	00000606 	br	800244c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8002434:	e0bffd17 	ldw	r2,-12(fp)
 8002438:	10800044 	addi	r2,r2,1
 800243c:	e0bffd15 	stw	r2,-12(fp)
 8002440:	e0bffd17 	ldw	r2,-12(fp)
 8002444:	10800810 	cmplti	r2,r2,32
 8002448:	103fe41e 	bne	r2,zero,80023dc <__alt_exception_stack_pointer+0xf80023dc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800244c:	e0bffe17 	ldw	r2,-8(fp)
}
 8002450:	e037883a 	mov	sp,fp
 8002454:	df000017 	ldw	fp,0(sp)
 8002458:	dec00104 	addi	sp,sp,4
 800245c:	f800283a 	ret

08002460 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8002460:	defffb04 	addi	sp,sp,-20
 8002464:	df000415 	stw	fp,16(sp)
 8002468:	df000404 	addi	fp,sp,16
 800246c:	e13ffe15 	stw	r4,-8(fp)
 8002470:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8002474:	e0bfff17 	ldw	r2,-4(fp)
 8002478:	10840070 	cmpltui	r2,r2,4097
 800247c:	1000021e 	bne	r2,zero,8002488 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8002480:	00840004 	movi	r2,4096
 8002484:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8002488:	e0fffe17 	ldw	r3,-8(fp)
 800248c:	e0bfff17 	ldw	r2,-4(fp)
 8002490:	1885883a 	add	r2,r3,r2
 8002494:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8002498:	e0bffe17 	ldw	r2,-8(fp)
 800249c:	e0bffc15 	stw	r2,-16(fp)
 80024a0:	00000506 	br	80024b8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80024a4:	e0bffc17 	ldw	r2,-16(fp)
 80024a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80024ac:	e0bffc17 	ldw	r2,-16(fp)
 80024b0:	10800804 	addi	r2,r2,32
 80024b4:	e0bffc15 	stw	r2,-16(fp)
 80024b8:	e0fffc17 	ldw	r3,-16(fp)
 80024bc:	e0bffd17 	ldw	r2,-12(fp)
 80024c0:	18bff836 	bltu	r3,r2,80024a4 <__alt_exception_stack_pointer+0xf80024a4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 80024c4:	e0bffe17 	ldw	r2,-8(fp)
 80024c8:	108007cc 	andi	r2,r2,31
 80024cc:	10000226 	beq	r2,zero,80024d8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 80024d0:	e0bffc17 	ldw	r2,-16(fp)
 80024d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80024d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 80024dc:	0001883a 	nop
 80024e0:	e037883a 	mov	sp,fp
 80024e4:	df000017 	ldw	fp,0(sp)
 80024e8:	dec00104 	addi	sp,sp,4
 80024ec:	f800283a 	ret

080024f0 <atexit>:
 80024f0:	200b883a 	mov	r5,r4
 80024f4:	000f883a 	mov	r7,zero
 80024f8:	000d883a 	mov	r6,zero
 80024fc:	0009883a 	mov	r4,zero
 8002500:	800257c1 	jmpi	800257c <__register_exitproc>

08002504 <exit>:
 8002504:	defffe04 	addi	sp,sp,-8
 8002508:	000b883a 	mov	r5,zero
 800250c:	dc000015 	stw	r16,0(sp)
 8002510:	dfc00115 	stw	ra,4(sp)
 8002514:	2021883a 	mov	r16,r4
 8002518:	80026d40 	call	80026d4 <__call_exitprocs>
 800251c:	8009883a 	mov	r4,r16
 8002520:	80028640 	call	8002864 <_exit>

08002524 <memcmp>:
 8002524:	218d883a 	add	r6,r4,r6
 8002528:	21800826 	beq	r4,r6,800254c <memcmp+0x28>
 800252c:	20800003 	ldbu	r2,0(r4)
 8002530:	28c00003 	ldbu	r3,0(r5)
 8002534:	10c00226 	beq	r2,r3,8002540 <memcmp+0x1c>
 8002538:	10c5c83a 	sub	r2,r2,r3
 800253c:	f800283a 	ret
 8002540:	21000044 	addi	r4,r4,1
 8002544:	29400044 	addi	r5,r5,1
 8002548:	003ff706 	br	8002528 <__alt_exception_stack_pointer+0xf8002528>
 800254c:	0005883a 	mov	r2,zero
 8002550:	f800283a 	ret

08002554 <memcpy>:
 8002554:	2005883a 	mov	r2,r4
 8002558:	2007883a 	mov	r3,r4
 800255c:	218d883a 	add	r6,r4,r6
 8002560:	19800526 	beq	r3,r6,8002578 <memcpy+0x24>
 8002564:	29000003 	ldbu	r4,0(r5)
 8002568:	18c00044 	addi	r3,r3,1
 800256c:	29400044 	addi	r5,r5,1
 8002570:	193fffc5 	stb	r4,-1(r3)
 8002574:	003ffa06 	br	8002560 <__alt_exception_stack_pointer+0xf8002560>
 8002578:	f800283a 	ret

0800257c <__register_exitproc>:
 800257c:	00820034 	movhi	r2,2048
 8002580:	108f0104 	addi	r2,r2,15364
 8002584:	10c00017 	ldw	r3,0(r2)
 8002588:	defff904 	addi	sp,sp,-28
 800258c:	dc000015 	stw	r16,0(sp)
 8002590:	1c000c17 	ldw	r16,48(r3)
 8002594:	dd400515 	stw	r21,20(sp)
 8002598:	dd000415 	stw	r20,16(sp)
 800259c:	dcc00315 	stw	r19,12(sp)
 80025a0:	dc800215 	stw	r18,8(sp)
 80025a4:	dc400115 	stw	r17,4(sp)
 80025a8:	dfc00615 	stw	ra,24(sp)
 80025ac:	202b883a 	mov	r21,r4
 80025b0:	2823883a 	mov	r17,r5
 80025b4:	3027883a 	mov	r19,r6
 80025b8:	3825883a 	mov	r18,r7
 80025bc:	1029883a 	mov	r20,r2
 80025c0:	8000021e 	bne	r16,zero,80025cc <__register_exitproc+0x50>
 80025c4:	1c000d04 	addi	r16,r3,52
 80025c8:	1c000c15 	stw	r16,48(r3)
 80025cc:	80800117 	ldw	r2,4(r16)
 80025d0:	00c007c4 	movi	r3,31
 80025d4:	1880110e 	bge	r3,r2,800261c <__register_exitproc+0xa0>
 80025d8:	00800034 	movhi	r2,0
 80025dc:	10800004 	addi	r2,r2,0
 80025e0:	1000021e 	bne	r2,zero,80025ec <__register_exitproc+0x70>
 80025e4:	00bfffc4 	movi	r2,-1
 80025e8:	00003106 	br	80026b0 <__register_exitproc+0x134>
 80025ec:	01002304 	movi	r4,140
 80025f0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80025f4:	1021883a 	mov	r16,r2
 80025f8:	103ffa26 	beq	r2,zero,80025e4 <__alt_exception_stack_pointer+0xf80025e4>
 80025fc:	10000115 	stw	zero,4(r2)
 8002600:	a0800017 	ldw	r2,0(r20)
 8002604:	10c00c17 	ldw	r3,48(r2)
 8002608:	80c00015 	stw	r3,0(r16)
 800260c:	14000c15 	stw	r16,48(r2)
 8002610:	80002215 	stw	zero,136(r16)
 8002614:	a8001d26 	beq	r21,zero,800268c <__register_exitproc+0x110>
 8002618:	00000606 	br	8002634 <__register_exitproc+0xb8>
 800261c:	a8001b26 	beq	r21,zero,800268c <__register_exitproc+0x110>
 8002620:	80802217 	ldw	r2,136(r16)
 8002624:	1000091e 	bne	r2,zero,800264c <__register_exitproc+0xd0>
 8002628:	00800034 	movhi	r2,0
 800262c:	10800004 	addi	r2,r2,0
 8002630:	103fec26 	beq	r2,zero,80025e4 <__alt_exception_stack_pointer+0xf80025e4>
 8002634:	01004204 	movi	r4,264
 8002638:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800263c:	103fe926 	beq	r2,zero,80025e4 <__alt_exception_stack_pointer+0xf80025e4>
 8002640:	10004015 	stw	zero,256(r2)
 8002644:	10004115 	stw	zero,260(r2)
 8002648:	80802215 	stw	r2,136(r16)
 800264c:	81400117 	ldw	r5,4(r16)
 8002650:	01000044 	movi	r4,1
 8002654:	2947883a 	add	r3,r5,r5
 8002658:	18c7883a 	add	r3,r3,r3
 800265c:	10c7883a 	add	r3,r2,r3
 8002660:	1cc00015 	stw	r19,0(r3)
 8002664:	2148983a 	sll	r4,r4,r5
 8002668:	11404017 	ldw	r5,256(r2)
 800266c:	290ab03a 	or	r5,r5,r4
 8002670:	11404015 	stw	r5,256(r2)
 8002674:	1c802015 	stw	r18,128(r3)
 8002678:	00c00084 	movi	r3,2
 800267c:	a8c0031e 	bne	r21,r3,800268c <__register_exitproc+0x110>
 8002680:	10c04117 	ldw	r3,260(r2)
 8002684:	1908b03a 	or	r4,r3,r4
 8002688:	11004115 	stw	r4,260(r2)
 800268c:	80800117 	ldw	r2,4(r16)
 8002690:	10c00044 	addi	r3,r2,1
 8002694:	10800084 	addi	r2,r2,2
 8002698:	1085883a 	add	r2,r2,r2
 800269c:	1085883a 	add	r2,r2,r2
 80026a0:	80c00115 	stw	r3,4(r16)
 80026a4:	80a1883a 	add	r16,r16,r2
 80026a8:	84400015 	stw	r17,0(r16)
 80026ac:	0005883a 	mov	r2,zero
 80026b0:	dfc00617 	ldw	ra,24(sp)
 80026b4:	dd400517 	ldw	r21,20(sp)
 80026b8:	dd000417 	ldw	r20,16(sp)
 80026bc:	dcc00317 	ldw	r19,12(sp)
 80026c0:	dc800217 	ldw	r18,8(sp)
 80026c4:	dc400117 	ldw	r17,4(sp)
 80026c8:	dc000017 	ldw	r16,0(sp)
 80026cc:	dec00704 	addi	sp,sp,28
 80026d0:	f800283a 	ret

080026d4 <__call_exitprocs>:
 80026d4:	defff504 	addi	sp,sp,-44
 80026d8:	dd000515 	stw	r20,20(sp)
 80026dc:	05020034 	movhi	r20,2048
 80026e0:	dc800315 	stw	r18,12(sp)
 80026e4:	dfc00a15 	stw	ra,40(sp)
 80026e8:	df000915 	stw	fp,36(sp)
 80026ec:	ddc00815 	stw	r23,32(sp)
 80026f0:	dd800715 	stw	r22,28(sp)
 80026f4:	dd400615 	stw	r21,24(sp)
 80026f8:	dcc00415 	stw	r19,16(sp)
 80026fc:	dc400215 	stw	r17,8(sp)
 8002700:	dc000115 	stw	r16,4(sp)
 8002704:	d9000015 	stw	r4,0(sp)
 8002708:	2825883a 	mov	r18,r5
 800270c:	a50f0104 	addi	r20,r20,15364
 8002710:	a4400017 	ldw	r17,0(r20)
 8002714:	8cc00c17 	ldw	r19,48(r17)
 8002718:	8c400c04 	addi	r17,r17,48
 800271c:	98004526 	beq	r19,zero,8002834 <__call_exitprocs+0x160>
 8002720:	9c000117 	ldw	r16,4(r19)
 8002724:	00900034 	movhi	r2,16384
 8002728:	10bfffc4 	addi	r2,r2,-1
 800272c:	9d402217 	ldw	r21,136(r19)
 8002730:	85bfffc4 	addi	r22,r16,-1
 8002734:	80a1883a 	add	r16,r16,r2
 8002738:	8421883a 	add	r16,r16,r16
 800273c:	8421883a 	add	r16,r16,r16
 8002740:	ac2f883a 	add	r23,r21,r16
 8002744:	84000204 	addi	r16,r16,8
 8002748:	9c21883a 	add	r16,r19,r16
 800274c:	b0002716 	blt	r22,zero,80027ec <__call_exitprocs+0x118>
 8002750:	90000726 	beq	r18,zero,8002770 <__call_exitprocs+0x9c>
 8002754:	a800041e 	bne	r21,zero,8002768 <__call_exitprocs+0x94>
 8002758:	b5bfffc4 	addi	r22,r22,-1
 800275c:	bdffff04 	addi	r23,r23,-4
 8002760:	843fff04 	addi	r16,r16,-4
 8002764:	003ff906 	br	800274c <__alt_exception_stack_pointer+0xf800274c>
 8002768:	b9002017 	ldw	r4,128(r23)
 800276c:	913ffa1e 	bne	r18,r4,8002758 <__alt_exception_stack_pointer+0xf8002758>
 8002770:	99000117 	ldw	r4,4(r19)
 8002774:	82000017 	ldw	r8,0(r16)
 8002778:	213fffc4 	addi	r4,r4,-1
 800277c:	b100021e 	bne	r22,r4,8002788 <__call_exitprocs+0xb4>
 8002780:	9d800115 	stw	r22,4(r19)
 8002784:	00000106 	br	800278c <__call_exitprocs+0xb8>
 8002788:	80000015 	stw	zero,0(r16)
 800278c:	403ff226 	beq	r8,zero,8002758 <__alt_exception_stack_pointer+0xf8002758>
 8002790:	9f000117 	ldw	fp,4(r19)
 8002794:	a8000526 	beq	r21,zero,80027ac <__call_exitprocs+0xd8>
 8002798:	00800044 	movi	r2,1
 800279c:	1592983a 	sll	r9,r2,r22
 80027a0:	a9404017 	ldw	r5,256(r21)
 80027a4:	494a703a 	and	r5,r9,r5
 80027a8:	2800021e 	bne	r5,zero,80027b4 <__call_exitprocs+0xe0>
 80027ac:	403ee83a 	callr	r8
 80027b0:	00000906 	br	80027d8 <__call_exitprocs+0x104>
 80027b4:	a9004117 	ldw	r4,260(r21)
 80027b8:	4908703a 	and	r4,r9,r4
 80027bc:	2000041e 	bne	r4,zero,80027d0 <__call_exitprocs+0xfc>
 80027c0:	b9400017 	ldw	r5,0(r23)
 80027c4:	d9000017 	ldw	r4,0(sp)
 80027c8:	403ee83a 	callr	r8
 80027cc:	00000206 	br	80027d8 <__call_exitprocs+0x104>
 80027d0:	b9000017 	ldw	r4,0(r23)
 80027d4:	403ee83a 	callr	r8
 80027d8:	99000117 	ldw	r4,4(r19)
 80027dc:	e13fcc1e 	bne	fp,r4,8002710 <__alt_exception_stack_pointer+0xf8002710>
 80027e0:	89000017 	ldw	r4,0(r17)
 80027e4:	993fdc26 	beq	r19,r4,8002758 <__alt_exception_stack_pointer+0xf8002758>
 80027e8:	003fc906 	br	8002710 <__alt_exception_stack_pointer+0xf8002710>
 80027ec:	00800034 	movhi	r2,0
 80027f0:	10800004 	addi	r2,r2,0
 80027f4:	10000f26 	beq	r2,zero,8002834 <__call_exitprocs+0x160>
 80027f8:	99400117 	ldw	r5,4(r19)
 80027fc:	99000017 	ldw	r4,0(r19)
 8002800:	2800091e 	bne	r5,zero,8002828 <__call_exitprocs+0x154>
 8002804:	20000826 	beq	r4,zero,8002828 <__call_exitprocs+0x154>
 8002808:	89000015 	stw	r4,0(r17)
 800280c:	a8000226 	beq	r21,zero,8002818 <__call_exitprocs+0x144>
 8002810:	a809883a 	mov	r4,r21
 8002814:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8002818:	9809883a 	mov	r4,r19
 800281c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8002820:	8cc00017 	ldw	r19,0(r17)
 8002824:	003fbd06 	br	800271c <__alt_exception_stack_pointer+0xf800271c>
 8002828:	9823883a 	mov	r17,r19
 800282c:	2027883a 	mov	r19,r4
 8002830:	003fba06 	br	800271c <__alt_exception_stack_pointer+0xf800271c>
 8002834:	dfc00a17 	ldw	ra,40(sp)
 8002838:	df000917 	ldw	fp,36(sp)
 800283c:	ddc00817 	ldw	r23,32(sp)
 8002840:	dd800717 	ldw	r22,28(sp)
 8002844:	dd400617 	ldw	r21,24(sp)
 8002848:	dd000517 	ldw	r20,20(sp)
 800284c:	dcc00417 	ldw	r19,16(sp)
 8002850:	dc800317 	ldw	r18,12(sp)
 8002854:	dc400217 	ldw	r17,8(sp)
 8002858:	dc000117 	ldw	r16,4(sp)
 800285c:	dec00b04 	addi	sp,sp,44
 8002860:	f800283a 	ret

08002864 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8002864:	defffd04 	addi	sp,sp,-12
 8002868:	df000215 	stw	fp,8(sp)
 800286c:	df000204 	addi	fp,sp,8
 8002870:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8002874:	0001883a 	nop
 8002878:	e0bfff17 	ldw	r2,-4(fp)
 800287c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8002880:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8002884:	10000226 	beq	r2,zero,8002890 <_exit+0x2c>
    ALT_SIM_FAIL();
 8002888:	002af070 	cmpltui	zero,zero,43969
 800288c:	00000106 	br	8002894 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8002890:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8002894:	003fff06 	br	8002894 <__alt_exception_stack_pointer+0xf8002894>
