
hw6dram.elf:     file format elf32-littlenios2
hw6dram.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000158

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00000d80 memsz 0x00000d80 flags r-x
    LOAD off    0x00001da0 vaddr 0x08000da0 paddr 0x08000dd4 align 2**12
         filesz 0x00000034 memsz 0x00000034 flags rw-
    LOAD off    0x00001e08 vaddr 0x08000e08 paddr 0x08000e08 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000138  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000bd8  08000158  08000158  00001158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000070  08000d30  08000d30  00001d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000034  08000da0  08000dd4  00001da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  08000e08  08000e08  00001e08  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00001dd4  2**0
                  CONTENTS
  7 .sdram        00000000  08000f24  08000f24  00001dd4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002d0  00000000  00000000  00001df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00002077  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000011fe  00000000  00000000  0000413f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000f19  00000000  00000000  0000533d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000424  00000000  00000000  00006258  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000009c2  00000000  00000000  0000667c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000edd  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00007f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001a8  00000000  00000000  00007f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000947e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  00009481  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000948a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000948b  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0000948c  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00009490  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00009494  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00009498  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000094a3  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000094ae  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  000094b9  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002f  00000000  00000000  000094c5  2**0
                  CONTENTS, READONLY
 30 .jdi          00004405  00000000  00000000  000094f4  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008b40b  00000000  00000000  0000d8f9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000158 l    d  .text	00000000 .text
08000d30 l    d  .rodata	00000000 .rodata
08000da0 l    d  .rwdata	00000000 .rwdata
08000e08 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08000f24 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hw6dram_bsp//obj/HAL/src/crt0.o
080001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
080000a0 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world_small.c
080002ac l     F .text	00000100 button_isr
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08000b5c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
08000910 g     F .text	0000002c alt_main
08000e24 g     O .bss	00000100 alt_irq
08000dd4 g       *ABS*	00000000 __flash_rwdata_start
08000000 g     F .entry	0000001c __reset
08000e08 g     O .bss	00000004 edge_capture
08000020 g       *ABS*	00000000 __flash_exceptions_start
08000490 g     F .text	000000ac get_hex
08000e14 g     O .bss	00000004 alt_argv
08008dc8 g       *ABS*	00000000 _gp
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08000680 g     F .text	00000064 .hidden __udivsi3
08000cf8 g     F .text	00000038 alt_icache_flush
10000000 g       *ABS*	00000000 __alt_exception_stack_pointer
08000f24 g       *ABS*	00000000 __bss_end
080007c8 g     F .text	00000068 alt_iic_isr_register
08000c38 g     F .text	000000b8 alt_tick
080007b0 g     F .text	00000018 alt_ic_irq_enabled
08000c04 g     F .text	00000034 alt_alarm_stop
08000e0c g     O .bss	00000004 alt_irq_active
080000f8 g     F .exceptions	00000060 alt_irq_handler
08000be0 g     F .text	00000018 alt_dcache_flush_all
08000dd4 g       *ABS*	00000000 __ram_rwdata_end
08000da0 g       *ABS*	00000000 __ram_rodata_end
08000dc8 g     O .rwdata	00000004 jtag_uart_0
080001ec g     F .text	000000c0 decimal_to_hex
080006e4 g     F .text	00000058 .hidden __umodsi3
08000f24 g       *ABS*	00000000 end
0ffff800 g       *ABS*	00000000 __alt_stack_pointer
08000b98 g     F .text	00000048 alt_avalon_timer_sc_init
080001a4 g     F .text	00000048 clearhex
08000b28 g     F .text	00000034 altera_avalon_jtag_uart_write
0800093c g     F .text	00000170 alt_printf
08000158 g     F .text	0000004c _start
08000e20 g     O .bss	00000004 _alt_tick_rate
08000e1c g     O .bss	00000004 _alt_nticks
08000b14 g     F .text	00000014 alt_sys_init
08000da0 g       *ABS*	00000000 __ram_rwdata_start
08000d30 g       *ABS*	00000000 __ram_rodata_start
08000f24 g       *ABS*	00000000 __alt_stack_base
08000e08 g       *ABS*	00000000 __bss_start
0800053c g     F .text	0000004c main
08000e10 g     O .bss	00000004 alt_envp
08000588 g     F .text	00000084 .hidden __divsi3
08000d30 g       *ABS*	00000000 __flash_rodata_start
08000da0 g     O .rwdata	00000028 hextable
08000af4 g     F .text	00000020 alt_irq_init
08000e18 g     O .bss	00000004 alt_argc
08000020 g       .exceptions	00000000 alt_irq_entry
08000020 g       *ABS*	00000000 __ram_exceptions_start
080003ac g     F .text	000000c0 hextableplace
0800073c g     F .text	00000004 alt_ic_isr_register
08000dd4 g       *ABS*	00000000 _edata
08000f24 g       *ABS*	00000000 _end
08000158 g       *ABS*	00000000 __ram_exceptions_end
0800046c g     F .text	00000024 concatenate
08000778 g     F .text	00000038 alt_ic_irq_disable
08000cf0 g     F .text	00000008 altera_nios2_qsys_irq_init
0800060c g     F .text	00000074 .hidden __modsi3
0ffff800 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800001c g       .entry	00000000 _exit
08000aac g     F .text	00000048 alt_putchar
08000bf8 g     F .text	0000000c alt_icache_flush_all
08000740 g     F .text	00000038 alt_ic_irq_enable
08000dcc g     O .rwdata	00000008 alt_alarm_list
08000830 g     F .text	000000e0 alt_load



Disassembly of section .entry:

08000000 <__reset>:
 8000000:	00840014 	movui	r2,4096
 8000004:	1001483a 	initi	r2
 8000008:	10bff804 	addi	r2,r2,-32
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_exception_stack_pointer+0xf8000004>
 8000010:	00420034 	movhi	at,2048
 8000014:	08405614 	ori	at,at,344
 8000018:	0800683a 	jmp	at

0800001c <_exit>:
 800001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

08000020 <alt_exception>:
 8000020:	0603fff4 	movhi	et,4095
 8000024:	c63fec14 	ori	et,et,65456
 8000028:	c6c01315 	stw	sp,76(et)
 800002c:	c037883a 	mov	sp,et
 8000030:	dfc00015 	stw	ra,0(sp)
 8000034:	d8400215 	stw	at,8(sp)
 8000038:	d8800315 	stw	r2,12(sp)
 800003c:	d8c00415 	stw	r3,16(sp)
 8000040:	d9000515 	stw	r4,20(sp)
 8000044:	d9400615 	stw	r5,24(sp)
 8000048:	d9800715 	stw	r6,28(sp)
 800004c:	d9c00815 	stw	r7,32(sp)
 8000050:	000b307a 	rdctl	r5,estatus
 8000054:	da000915 	stw	r8,36(sp)
 8000058:	da400a15 	stw	r9,40(sp)
 800005c:	da800b15 	stw	r10,44(sp)
 8000060:	dac00c15 	stw	r11,48(sp)
 8000064:	db000d15 	stw	r12,52(sp)
 8000068:	db400e15 	stw	r13,56(sp)
 800006c:	db800f15 	stw	r14,60(sp)
 8000070:	dbc01015 	stw	r15,64(sp)
 8000074:	d9401115 	stw	r5,68(sp)
 8000078:	ebffff04 	addi	r15,ea,-4
 800007c:	dbc01215 	stw	r15,72(sp)
 8000080:	0009313a 	rdctl	r4,ipending
 8000084:	2880004c 	andi	r2,r5,1
 8000088:	10000326 	beq	r2,zero,8000098 <alt_exception+0x78>
 800008c:	20000226 	beq	r4,zero,8000098 <alt_exception+0x78>
 8000090:	80000f80 	call	80000f8 <alt_irq_handler>
 8000094:	00000306 	br	80000a4 <alt_exception_unknown+0x4>
 8000098:	df401215 	stw	ea,72(sp)
 800009c:	e8bfff17 	ldw	r2,-4(ea)

080000a0 <alt_exception_unknown>:
 80000a0:	003da03a 	break	0
 80000a4:	d9401117 	ldw	r5,68(sp)
 80000a8:	df401217 	ldw	ea,72(sp)
 80000ac:	dfc00017 	ldw	ra,0(sp)
 80000b0:	2801707a 	wrctl	estatus,r5
 80000b4:	d8400217 	ldw	at,8(sp)
 80000b8:	d8800317 	ldw	r2,12(sp)
 80000bc:	d8c00417 	ldw	r3,16(sp)
 80000c0:	d9000517 	ldw	r4,20(sp)
 80000c4:	d9400617 	ldw	r5,24(sp)
 80000c8:	d9800717 	ldw	r6,28(sp)
 80000cc:	d9c00817 	ldw	r7,32(sp)
 80000d0:	da000917 	ldw	r8,36(sp)
 80000d4:	da400a17 	ldw	r9,40(sp)
 80000d8:	da800b17 	ldw	r10,44(sp)
 80000dc:	dac00c17 	ldw	r11,48(sp)
 80000e0:	db000d17 	ldw	r12,52(sp)
 80000e4:	db400e17 	ldw	r13,56(sp)
 80000e8:	db800f17 	ldw	r14,60(sp)
 80000ec:	dbc01017 	ldw	r15,64(sp)
 80000f0:	dec01317 	ldw	sp,76(sp)
 80000f4:	ef80083a 	eret

080000f8 <alt_irq_handler>:
 80000f8:	defffe04 	addi	sp,sp,-8
 80000fc:	dfc00115 	stw	ra,4(sp)
 8000100:	dc000015 	stw	r16,0(sp)
 8000104:	0009313a 	rdctl	r4,ipending
 8000108:	04020034 	movhi	r16,2048
 800010c:	84038904 	addi	r16,r16,3620
 8000110:	0005883a 	mov	r2,zero
 8000114:	00c00044 	movi	r3,1
 8000118:	20ca703a 	and	r5,r4,r3
 800011c:	28000b26 	beq	r5,zero,800014c <alt_irq_handler+0x54>
 8000120:	100490fa 	slli	r2,r2,3
 8000124:	8085883a 	add	r2,r16,r2
 8000128:	10c00017 	ldw	r3,0(r2)
 800012c:	11000117 	ldw	r4,4(r2)
 8000130:	183ee83a 	callr	r3
 8000134:	0009313a 	rdctl	r4,ipending
 8000138:	203ff51e 	bne	r4,zero,8000110 <__alt_exception_stack_pointer+0xf8000110>
 800013c:	dfc00117 	ldw	ra,4(sp)
 8000140:	dc000017 	ldw	r16,0(sp)
 8000144:	dec00204 	addi	sp,sp,8
 8000148:	f800283a 	ret
 800014c:	18c7883a 	add	r3,r3,r3
 8000150:	10800044 	addi	r2,r2,1
 8000154:	003ff006 	br	8000118 <__alt_exception_stack_pointer+0xf8000118>

Disassembly of section .text:

08000158 <_start>:
 8000158:	00820014 	movui	r2,2048
 800015c:	10000033 	initd	0(r2)
 8000160:	10bff804 	addi	r2,r2,-32
 8000164:	00bffd16 	blt	zero,r2,800015c <__alt_exception_stack_pointer+0xf800015c>
 8000168:	06c3fff4 	movhi	sp,4095
 800016c:	defe0014 	ori	sp,sp,63488
 8000170:	06820034 	movhi	gp,2048
 8000174:	d6a37214 	ori	gp,gp,36296
 8000178:	00820034 	movhi	r2,2048
 800017c:	10838214 	ori	r2,r2,3592
 8000180:	00c20034 	movhi	r3,2048
 8000184:	18c3c914 	ori	r3,r3,3876
 8000188:	10c00326 	beq	r2,r3,8000198 <_start+0x40>
 800018c:	10000015 	stw	zero,0(r2)
 8000190:	10800104 	addi	r2,r2,4
 8000194:	10fffd36 	bltu	r2,r3,800018c <__alt_exception_stack_pointer+0xf800018c>
 8000198:	80008300 	call	8000830 <alt_load>
 800019c:	80009100 	call	8000910 <alt_main>

080001a0 <alt_after_alt_main>:
 80001a0:	003fff06 	br	80001a0 <__alt_exception_stack_pointer+0xf80001a0>

080001a4 <clearhex>:
}


void clearhex()
{
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_0_BASE,HEXVAL_CLEAR);
 80001a4:	00803fc4 	movi	r2,255
 80001a8:	00c80c04 	movi	r3,8240
 80001ac:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_1_BASE,HEXVAL_CLEAR);
 80001b0:	00c81804 	movi	r3,8288
 80001b4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_2_BASE,HEXVAL_CLEAR);
 80001b8:	00c81404 	movi	r3,8272
 80001bc:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_3_BASE,HEXVAL_CLEAR);
 80001c0:	00c81004 	movi	r3,8256
 80001c4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_4_BASE,HEXVAL_CLEAR);
 80001c8:	00c82804 	movi	r3,8352
 80001cc:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_5_BASE,HEXVAL_CLEAR);
 80001d0:	00c82404 	movi	r3,8336
 80001d4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_6_BASE,HEXVAL_CLEAR);
 80001d8:	00c82004 	movi	r3,8320
 80001dc:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_7_BASE,HEXVAL_CLEAR);
 80001e0:	00c81c04 	movi	r3,8304
 80001e4:	18800035 	stwio	r2,0(r3)
 80001e8:	f800283a 	ret

080001ec <decimal_to_hex>:
}

void decimal_to_hex(alt_u8 uhex)
{
 80001ec:	defffd04 	addi	sp,sp,-12
 80001f0:	dc400115 	stw	r17,4(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_0_BASE, hextable[(uhex)%10]);
 80001f4:	24403fcc 	andi	r17,r4,255
 80001f8:	01400284 	movi	r5,10
 80001fc:	8809883a 	mov	r4,r17
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_6_BASE,HEXVAL_CLEAR);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_7_BASE,HEXVAL_CLEAR);
}

void decimal_to_hex(alt_u8 uhex)
{
 8000200:	dc000015 	stw	r16,0(sp)
 8000204:	dfc00215 	stw	ra,8(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_0_BASE, hextable[(uhex)%10]);
 8000208:	80006e40 	call	80006e4 <__umodsi3>
 800020c:	10803fcc 	andi	r2,r2,255
 8000210:	04020034 	movhi	r16,2048
 8000214:	1085883a 	add	r2,r2,r2
 8000218:	84036804 	addi	r16,r16,3488
 800021c:	1085883a 	add	r2,r2,r2
 8000220:	8085883a 	add	r2,r16,r2
 8000224:	10c00017 	ldw	r3,0(r2)
 8000228:	00880c04 	movi	r2,8240
 800022c:	10c00035 	stwio	r3,0(r2)
	uhex /= 10;

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_1_BASE, hextable[(uhex)%10]);
 8000230:	8809883a 	mov	r4,r17
 8000234:	01400284 	movi	r5,10
 8000238:	80006800 	call	8000680 <__udivsi3>
 800023c:	01400284 	movi	r5,10
 8000240:	11003fcc 	andi	r4,r2,255
 8000244:	80006e40 	call	80006e4 <__umodsi3>
 8000248:	10803fcc 	andi	r2,r2,255
 800024c:	1085883a 	add	r2,r2,r2
 8000250:	1085883a 	add	r2,r2,r2
 8000254:	8085883a 	add	r2,r16,r2
 8000258:	10c00017 	ldw	r3,0(r2)
 800025c:	00881804 	movi	r2,8288
 8000260:	10c00035 	stwio	r3,0(r2)
	uhex /= 10;

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_2_BASE,HEXVAL_CLEAR);
 8000264:	00803fc4 	movi	r2,255
 8000268:	00c81404 	movi	r3,8272
 800026c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_3_BASE,HEXVAL_CLEAR);
 8000270:	00c81004 	movi	r3,8256
 8000274:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_4_BASE,HEXVAL_CLEAR);
 8000278:	00c82804 	movi	r3,8352
 800027c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_5_BASE,HEXVAL_CLEAR);
 8000280:	00c82404 	movi	r3,8336
 8000284:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_6_BASE,HEXVAL_CLEAR);
 8000288:	00c82004 	movi	r3,8320
 800028c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_7_BASE,HEXVAL_CLEAR);
 8000290:	00c81c04 	movi	r3,8304
 8000294:	18800035 	stwio	r2,0(r3)
}
 8000298:	dfc00217 	ldw	ra,8(sp)
 800029c:	dc400117 	ldw	r17,4(sp)
 80002a0:	dc000017 	ldw	r16,0(sp)
 80002a4:	dec00304 	addi	sp,sp,12
 80002a8:	f800283a 	ret

080002ac <button_isr>:
}



static void button_isr(void* context, alt_u32 id)
{
 80002ac:	defffe04 	addi	sp,sp,-8
 80002b0:	dc000015 	stw	r16,0(sp)
	/* Cast context to edge_capture's type. It is important that this be
	     * declared volatile to avoid unwanted compiler optimization.
	     */
	    volatile int* edge_capture_ptr = (volatile int*) context;
	    /* Store the value in the Button's edge capture register in *context. */
	    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTONS_BASE);
 80002b4:	00882f04 	movi	r2,8380
}



static void button_isr(void* context, alt_u32 id)
{
 80002b8:	2021883a 	mov	r16,r4
 80002bc:	dfc00115 	stw	ra,4(sp)
	/* Cast context to edge_capture's type. It is important that this be
	     * declared volatile to avoid unwanted compiler optimization.
	     */
	    volatile int* edge_capture_ptr = (volatile int*) context;
	    /* Store the value in the Button's edge capture register in *context. */
	    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTONS_BASE);
 80002c0:	10800037 	ldwio	r2,0(r2)
 80002c4:	20800015 	stw	r2,0(r4)

	    alt_printf("Interrupt occurred\n");
 80002c8:	01020034 	movhi	r4,2048
 80002cc:	21035304 	addi	r4,r4,3404
 80002d0:	800093c0 	call	800093c <alt_printf>
	    alt_printf("ISR Reached!\n");
 80002d4:	01020034 	movhi	r4,2048
 80002d8:	21035804 	addi	r4,r4,3424
 80002dc:	800093c0 	call	800093c <alt_printf>

		 if (*edge_capture_ptr & 0b0010)// key2
 80002e0:	80800017 	ldw	r2,0(r16)
 80002e4:	1080008c 	andi	r2,r2,2
 80002e8:	10000526 	beq	r2,zero,8000300 <button_isr+0x54>
		 {
			 IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0b0001);
 80002ec:	00883404 	movi	r2,8400
 80002f0:	00c00044 	movi	r3,1
 80002f4:	10c00035 	stwio	r3,0(r2)
			 decimal_to_hex((alt_u8)IORD_ALTERA_AVALON_PIO_DATA(LEDG_BASE));
 80002f8:	11000037 	ldwio	r4,0(r2)
 80002fc:	00002206 	br	8000388 <button_isr+0xdc>
		 }
		 else if(*edge_capture_ptr & 0b0100) //key 3
 8000300:	80800017 	ldw	r2,0(r16)
 8000304:	1080010c 	andi	r2,r2,4
 8000308:	10002126 	beq	r2,zero,8000390 <button_isr+0xe4>
		 {
			 int temp = (int)IORD_ALTERA_AVALON_PIO_DATA(LEDG_BASE);
 800030c:	00883404 	movi	r2,8400
 8000310:	11000037 	ldwio	r4,0(r2)
			 if((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0b000000000000000001))
 8000314:	00c83004 	movi	r3,8384
 8000318:	18800037 	ldwio	r2,0(r3)
 800031c:	1080004c 	andi	r2,r2,1
 8000320:	10000b26 	beq	r2,zero,8000350 <button_isr+0xa4>
			 {
				 ++temp;
 8000324:	21000044 	addi	r4,r4,1
				 while (temp%2 == 0)
				 {
					temp = (temp > 127 ? 1 : ++temp);
 8000328:	00c01fc4 	movi	r3,127
 800032c:	01400044 	movi	r5,1
		 {
			 int temp = (int)IORD_ALTERA_AVALON_PIO_DATA(LEDG_BASE);
			 if((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0b000000000000000001))
			 {
				 ++temp;
				 while (temp%2 == 0)
 8000330:	2080004c 	andi	r2,r4,1
 8000334:	1000121e 	bne	r2,zero,8000380 <button_isr+0xd4>
				 {
					temp = (temp > 127 ? 1 : ++temp);
 8000338:	19000316 	blt	r3,r4,8000348 <button_isr+0x9c>
 800033c:	21000044 	addi	r4,r4,1
					if (temp == 1)
 8000340:	217ffb1e 	bne	r4,r5,8000330 <__alt_exception_stack_pointer+0xf8000330>
 8000344:	00000e06 	br	8000380 <button_isr+0xd4>
 8000348:	01000044 	movi	r4,1
 800034c:	00000c06 	br	8000380 <button_isr+0xd4>
				 }

				 IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,temp);
				 decimal_to_hex((alt_u8)temp);
			 }
			 else if (!(IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0b000000000000000000))
 8000350:	18800037 	ldwio	r2,0(r3)
			 {
				temp = (temp <= 1 ? 1 : --temp);
 8000354:	00800044 	movi	r2,1
 8000358:	1100080e 	bge	r2,r4,800037c <button_isr+0xd0>
 800035c:	213fffc4 	addi	r4,r4,-1
				 while (temp%2 == 0)
				 {
					temp = (temp <= 1 ? 1 : --temp);
 8000360:	100b883a 	mov	r5,r2
				 decimal_to_hex((alt_u8)temp);
			 }
			 else if (!(IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0b000000000000000000))
			 {
				temp = (temp <= 1 ? 1 : --temp);
				 while (temp%2 == 0)
 8000364:	20c0004c 	andi	r3,r4,1
 8000368:	1800051e 	bne	r3,zero,8000380 <button_isr+0xd4>
				 {
					temp = (temp <= 1 ? 1 : --temp);
 800036c:	20800426 	beq	r4,r2,8000380 <button_isr+0xd4>
 8000370:	213fffc4 	addi	r4,r4,-1
					if (temp == 1)
 8000374:	217ffb1e 	bne	r4,r5,8000364 <__alt_exception_stack_pointer+0xf8000364>
 8000378:	00000106 	br	8000380 <button_isr+0xd4>
				 IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,temp);
				 decimal_to_hex((alt_u8)temp);
			 }
			 else if (!(IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0b000000000000000000))
			 {
				temp = (temp <= 1 ? 1 : --temp);
 800037c:	1009883a 	mov	r4,r2
					temp = (temp <= 1 ? 1 : --temp);
					if (temp == 1)
						break;
				 }

				 IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,temp);
 8000380:	00883404 	movi	r2,8400
 8000384:	11000035 	stwio	r4,0(r2)
				 decimal_to_hex((alt_u8)temp);
 8000388:	21003fcc 	andi	r4,r4,255
 800038c:	80001ec0 	call	80001ec <decimal_to_hex>
			 }
		 }


	    /* Reset the Button's edge capture register. */
	    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTONS_BASE, 0);
 8000390:	00882f04 	movi	r2,8380
 8000394:	10000035 	stwio	zero,0(r2)
	    IORD_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTONS_BASE);
 8000398:	10800037 	ldwio	r2,0(r2)
}
 800039c:	dfc00117 	ldw	ra,4(sp)
 80003a0:	dc000017 	ldw	r16,0(sp)
 80003a4:	dec00204 	addi	sp,sp,8
 80003a8:	f800283a 	ret

080003ac <hextableplace>:
	return concatenate(x,y);

}

alt_u8 hextableplace(alt_u8 place)
{
 80003ac:	2005883a 	mov	r2,r4
	switch(place){
 80003b0:	00c02644 	movi	r3,153
 80003b4:	21003fcc 	andi	r4,r4,255
 80003b8:	20c01e26 	beq	r4,r3,8000434 <hextableplace+0x88>
 80003bc:	19000b36 	bltu	r3,r4,80003ec <hextableplace+0x40>
 80003c0:	00c02084 	movi	r3,130
 80003c4:	20c01f26 	beq	r4,r3,8000444 <hextableplace+0x98>
 80003c8:	19000336 	bltu	r3,r4,80003d8 <hextableplace+0x2c>
 80003cc:	00c02004 	movi	r3,128
 80003d0:	20c02026 	beq	r4,r3,8000454 <hextableplace+0xa8>
 80003d4:	f800283a 	ret
 80003d8:	00c02484 	movi	r3,146
 80003dc:	20c01726 	beq	r4,r3,800043c <hextableplace+0x90>
 80003e0:	00c02604 	movi	r3,152
 80003e4:	20c01d26 	beq	r4,r3,800045c <hextableplace+0xb0>
 80003e8:	f800283a 	ret
 80003ec:	00c03004 	movi	r3,192
 80003f0:	20c01c26 	beq	r4,r3,8000464 <hextableplace+0xb8>
 80003f4:	19000536 	bltu	r3,r4,800040c <hextableplace+0x60>
 80003f8:	00c02904 	movi	r3,164
 80003fc:	20c00926 	beq	r4,r3,8000424 <hextableplace+0x78>
 8000400:	00c02c04 	movi	r3,176
 8000404:	20c00926 	beq	r4,r3,800042c <hextableplace+0x80>
 8000408:	f800283a 	ret
 800040c:	00c03e04 	movi	r3,248
 8000410:	20c00e26 	beq	r4,r3,800044c <hextableplace+0xa0>
 8000414:	00c03e44 	movi	r3,249
 8000418:	20c0131e 	bne	r4,r3,8000468 <hextableplace+0xbc>
		case HEXVAL_0:
			place = 0;
				break;
		case HEXVAL_1:
			place = 1;
 800041c:	00800044 	movi	r2,1
				break;
 8000420:	f800283a 	ret
		case HEXVAL_2:
			place = 2;
 8000424:	00800084 	movi	r2,2
				break;
 8000428:	f800283a 	ret
		case HEXVAL_3:
			place = 3;
 800042c:	008000c4 	movi	r2,3
				break;
 8000430:	f800283a 	ret
		case HEXVAL_4:
			place = 4;
 8000434:	00800104 	movi	r2,4
				break;
 8000438:	f800283a 	ret
		case HEXVAL_5:
			place = 5;
 800043c:	00800144 	movi	r2,5
				break;
 8000440:	f800283a 	ret
		case HEXVAL_6:
			place = 6;
 8000444:	00800184 	movi	r2,6
				break;
 8000448:	f800283a 	ret
		case HEXVAL_7:
			place = 7;
 800044c:	008001c4 	movi	r2,7
				break;
 8000450:	f800283a 	ret
		case HEXVAL_8:
			place = 8;
 8000454:	00800204 	movi	r2,8
				break;
 8000458:	f800283a 	ret
		case HEXVAL_9:
			place = 9;
 800045c:	00800244 	movi	r2,9
				break;
 8000460:	f800283a 	ret

alt_u8 hextableplace(alt_u8 place)
{
	switch(place){
		case HEXVAL_0:
			place = 0;
 8000464:	0005883a 	mov	r2,zero
		case HEXVAL_9:
			place = 9;
				break;
	}
	return place;
}
 8000468:	f800283a 	ret

0800046c <concatenate>:


alt_u8 concatenate(alt_u8 x, alt_u8 y) {
	alt_u8 pow = 10;
 800046c:	00c00284 	movi	r3,10
    while(y >= pow)
 8000470:	29803fcc 	andi	r6,r5,255
 8000474:	18803fcc 	andi	r2,r3,255
 8000478:	30800236 	bltu	r6,r2,8000484 <concatenate+0x18>
        pow *= 10;
 800047c:	18c002a4 	muli	r3,r3,10
 8000480:	003ffc06 	br	8000474 <__alt_exception_stack_pointer+0xf8000474>
    return x * pow + y;
 8000484:	20c5383a 	mul	r2,r4,r3
}
 8000488:	2885883a 	add	r2,r5,r2
 800048c:	f800283a 	ret

08000490 <get_hex>:
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_6_BASE,HEXVAL_CLEAR);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_7_BASE,HEXVAL_CLEAR);
}

alt_u8 get_hex()
{
 8000490:	defffc04 	addi	sp,sp,-16

	alt_u8 x = ((alt_u8)IORD_ALTERA_AVALON_PIO_DATA(HEX_1_BASE)&0b01111111);
 8000494:	00881804 	movi	r2,8288
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_6_BASE,HEXVAL_CLEAR);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_7_BASE,HEXVAL_CLEAR);
}

alt_u8 get_hex()
{
 8000498:	dfc00315 	stw	ra,12(sp)
 800049c:	dc400215 	stw	r17,8(sp)
 80004a0:	dc000115 	stw	r16,4(sp)

	alt_u8 x = ((alt_u8)IORD_ALTERA_AVALON_PIO_DATA(HEX_1_BASE)&0b01111111);
 80004a4:	11000037 	ldwio	r4,0(r2)
 80004a8:	21001fcc 	andi	r4,r4,127
	x+= 0b10000000;
	x = hextableplace(x);
 80004ac:	21002014 	ori	r4,r4,128
 80004b0:	80003ac0 	call	80003ac <hextableplace>
	alt_printf("\nX val = %x", x);
 80004b4:	14003fcc 	andi	r16,r2,255
 80004b8:	01020034 	movhi	r4,2048
 80004bc:	800b883a 	mov	r5,r16
 80004c0:	21035c04 	addi	r4,r4,3440
 80004c4:	800093c0 	call	800093c <alt_printf>
	alt_u8 y = ((alt_u8)IORD_ALTERA_AVALON_PIO_DATA(HEX_0_BASE)&0b01111111);
 80004c8:	00880c04 	movi	r2,8240
 80004cc:	11000037 	ldwio	r4,0(r2)
 80004d0:	21001fcc 	andi	r4,r4,127
	y+= 0b10000000;
	y = hextableplace(y);
 80004d4:	21002014 	ori	r4,r4,128
 80004d8:	80003ac0 	call	80003ac <hextableplace>


	alt_printf("\nY val = %x", y);
 80004dc:	14403fcc 	andi	r17,r2,255
 80004e0:	01020034 	movhi	r4,2048
 80004e4:	880b883a 	mov	r5,r17
 80004e8:	21035f04 	addi	r4,r4,3452
 80004ec:	800093c0 	call	800093c <alt_printf>

	if(x == 0xff || y == 0xff){
 80004f0:	00803fc4 	movi	r2,255
 80004f4:	80800b26 	beq	r16,r2,8000524 <get_hex+0x94>
 80004f8:	88800a26 	beq	r17,r2,8000524 <get_hex+0x94>
		return 0b01;
	}

	alt_printf("\nConcatenation = %x\n", concatenate(x,y));
 80004fc:	880b883a 	mov	r5,r17
 8000500:	8009883a 	mov	r4,r16
 8000504:	800046c0 	call	800046c <concatenate>
 8000508:	01020034 	movhi	r4,2048
 800050c:	11403fcc 	andi	r5,r2,255
 8000510:	21036204 	addi	r4,r4,3464
 8000514:	d8800015 	stw	r2,0(sp)
 8000518:	800093c0 	call	800093c <alt_printf>

	return concatenate(x,y);
 800051c:	d8800017 	ldw	r2,0(sp)
 8000520:	00000106 	br	8000528 <get_hex+0x98>


	alt_printf("\nY val = %x", y);

	if(x == 0xff || y == 0xff){
		return 0b01;
 8000524:	00800044 	movi	r2,1

	alt_printf("\nConcatenation = %x\n", concatenate(x,y));

	return concatenate(x,y);

}
 8000528:	dfc00317 	ldw	ra,12(sp)
 800052c:	dc400217 	ldw	r17,8(sp)
 8000530:	dc000117 	ldw	r16,4(sp)
 8000534:	dec00404 	addi	sp,sp,16
 8000538:	f800283a 	ret

0800053c <main>:
alt_u8 hextableplace(alt_u8 place);
static void button_isr(void* context, alt_u32 id);
static void button_isr2(void* context, alt_u32 id);
static void initial_message()
{
    alt_printf("* Hello from Nios II!    *\n");
 800053c:	01020034 	movhi	r4,2048
}



int main()
{ 
 8000540:	defffe04 	addi	sp,sp,-8
alt_u8 hextableplace(alt_u8 place);
static void button_isr(void* context, alt_u32 id);
static void button_isr2(void* context, alt_u32 id);
static void initial_message()
{
    alt_printf("* Hello from Nios II!    *\n");
 8000544:	21034c04 	addi	r4,r4,3376
}



int main()
{ 
 8000548:	dfc00115 	stw	ra,4(sp)
alt_u8 hextableplace(alt_u8 place);
static void button_isr(void* context, alt_u32 id);
static void button_isr2(void* context, alt_u32 id);
static void initial_message()
{
    alt_printf("* Hello from Nios II!    *\n");
 800054c:	800093c0 	call	800093c <alt_printf>
{
	/* Recast the edge_capture pointer to match the alt_irq_register() function
	     * prototype. */
	    void* edge_capture_ptr = (void*) &edge_capture;
	    /* Enable all 4 button interrupts. */
	    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PUSH_BUTTONS_BASE, 0x0f);
 8000550:	00882e04 	movi	r2,8376
 8000554:	00c003c4 	movi	r3,15
 8000558:	10c00035 	stwio	r3,0(r2)
	    /* Reset the edge capture register. */
	    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTONS_BASE, 0x00);
 800055c:	00882f04 	movi	r2,8380
 8000560:	10000035 	stwio	zero,0(r2)
	    /* Register the interrupt handler. */
	    alt_ic_isr_register(PUSH_BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID, PUSH_BUTTONS_IRQ,
 8000564:	01820034 	movhi	r6,2048
 8000568:	d1e01004 	addi	r7,gp,-32704
 800056c:	3180ab04 	addi	r6,r6,684
 8000570:	01400044 	movi	r5,1
 8000574:	0009883a 	mov	r4,zero
 8000578:	d8000015 	stw	zero,0(sp)
 800057c:	800073c0 	call	800073c <alt_ic_isr_register>

int main()
{ 
	initial_message();
	init_button_pio();
	clearhex();
 8000580:	80001a40 	call	80001a4 <clearhex>
 8000584:	003fff06 	br	8000584 <__alt_exception_stack_pointer+0xf8000584>

08000588 <__divsi3>:
 8000588:	20001b16 	blt	r4,zero,80005f8 <__divsi3+0x70>
 800058c:	000f883a 	mov	r7,zero
 8000590:	28001616 	blt	r5,zero,80005ec <__divsi3+0x64>
 8000594:	200d883a 	mov	r6,r4
 8000598:	29001a2e 	bgeu	r5,r4,8000604 <__divsi3+0x7c>
 800059c:	00800804 	movi	r2,32
 80005a0:	00c00044 	movi	r3,1
 80005a4:	00000106 	br	80005ac <__divsi3+0x24>
 80005a8:	10000d26 	beq	r2,zero,80005e0 <__divsi3+0x58>
 80005ac:	294b883a 	add	r5,r5,r5
 80005b0:	10bfffc4 	addi	r2,r2,-1
 80005b4:	18c7883a 	add	r3,r3,r3
 80005b8:	293ffb36 	bltu	r5,r4,80005a8 <__alt_exception_stack_pointer+0xf80005a8>
 80005bc:	0005883a 	mov	r2,zero
 80005c0:	18000726 	beq	r3,zero,80005e0 <__divsi3+0x58>
 80005c4:	0005883a 	mov	r2,zero
 80005c8:	31400236 	bltu	r6,r5,80005d4 <__divsi3+0x4c>
 80005cc:	314dc83a 	sub	r6,r6,r5
 80005d0:	10c4b03a 	or	r2,r2,r3
 80005d4:	1806d07a 	srli	r3,r3,1
 80005d8:	280ad07a 	srli	r5,r5,1
 80005dc:	183ffa1e 	bne	r3,zero,80005c8 <__alt_exception_stack_pointer+0xf80005c8>
 80005e0:	38000126 	beq	r7,zero,80005e8 <__divsi3+0x60>
 80005e4:	0085c83a 	sub	r2,zero,r2
 80005e8:	f800283a 	ret
 80005ec:	014bc83a 	sub	r5,zero,r5
 80005f0:	39c0005c 	xori	r7,r7,1
 80005f4:	003fe706 	br	8000594 <__alt_exception_stack_pointer+0xf8000594>
 80005f8:	0109c83a 	sub	r4,zero,r4
 80005fc:	01c00044 	movi	r7,1
 8000600:	003fe306 	br	8000590 <__alt_exception_stack_pointer+0xf8000590>
 8000604:	00c00044 	movi	r3,1
 8000608:	003fee06 	br	80005c4 <__alt_exception_stack_pointer+0xf80005c4>

0800060c <__modsi3>:
 800060c:	20001716 	blt	r4,zero,800066c <__modsi3+0x60>
 8000610:	000f883a 	mov	r7,zero
 8000614:	2005883a 	mov	r2,r4
 8000618:	28001216 	blt	r5,zero,8000664 <__modsi3+0x58>
 800061c:	2900162e 	bgeu	r5,r4,8000678 <__modsi3+0x6c>
 8000620:	01800804 	movi	r6,32
 8000624:	00c00044 	movi	r3,1
 8000628:	00000106 	br	8000630 <__modsi3+0x24>
 800062c:	30000a26 	beq	r6,zero,8000658 <__modsi3+0x4c>
 8000630:	294b883a 	add	r5,r5,r5
 8000634:	31bfffc4 	addi	r6,r6,-1
 8000638:	18c7883a 	add	r3,r3,r3
 800063c:	293ffb36 	bltu	r5,r4,800062c <__alt_exception_stack_pointer+0xf800062c>
 8000640:	18000526 	beq	r3,zero,8000658 <__modsi3+0x4c>
 8000644:	1806d07a 	srli	r3,r3,1
 8000648:	11400136 	bltu	r2,r5,8000650 <__modsi3+0x44>
 800064c:	1145c83a 	sub	r2,r2,r5
 8000650:	280ad07a 	srli	r5,r5,1
 8000654:	183ffb1e 	bne	r3,zero,8000644 <__alt_exception_stack_pointer+0xf8000644>
 8000658:	38000126 	beq	r7,zero,8000660 <__modsi3+0x54>
 800065c:	0085c83a 	sub	r2,zero,r2
 8000660:	f800283a 	ret
 8000664:	014bc83a 	sub	r5,zero,r5
 8000668:	003fec06 	br	800061c <__alt_exception_stack_pointer+0xf800061c>
 800066c:	0109c83a 	sub	r4,zero,r4
 8000670:	01c00044 	movi	r7,1
 8000674:	003fe706 	br	8000614 <__alt_exception_stack_pointer+0xf8000614>
 8000678:	00c00044 	movi	r3,1
 800067c:	003ff106 	br	8000644 <__alt_exception_stack_pointer+0xf8000644>

08000680 <__udivsi3>:
 8000680:	200d883a 	mov	r6,r4
 8000684:	2900152e 	bgeu	r5,r4,80006dc <__udivsi3+0x5c>
 8000688:	28001416 	blt	r5,zero,80006dc <__udivsi3+0x5c>
 800068c:	00800804 	movi	r2,32
 8000690:	00c00044 	movi	r3,1
 8000694:	00000206 	br	80006a0 <__udivsi3+0x20>
 8000698:	10000e26 	beq	r2,zero,80006d4 <__udivsi3+0x54>
 800069c:	28000516 	blt	r5,zero,80006b4 <__udivsi3+0x34>
 80006a0:	294b883a 	add	r5,r5,r5
 80006a4:	10bfffc4 	addi	r2,r2,-1
 80006a8:	18c7883a 	add	r3,r3,r3
 80006ac:	293ffa36 	bltu	r5,r4,8000698 <__alt_exception_stack_pointer+0xf8000698>
 80006b0:	18000826 	beq	r3,zero,80006d4 <__udivsi3+0x54>
 80006b4:	0005883a 	mov	r2,zero
 80006b8:	31400236 	bltu	r6,r5,80006c4 <__udivsi3+0x44>
 80006bc:	314dc83a 	sub	r6,r6,r5
 80006c0:	10c4b03a 	or	r2,r2,r3
 80006c4:	1806d07a 	srli	r3,r3,1
 80006c8:	280ad07a 	srli	r5,r5,1
 80006cc:	183ffa1e 	bne	r3,zero,80006b8 <__alt_exception_stack_pointer+0xf80006b8>
 80006d0:	f800283a 	ret
 80006d4:	0005883a 	mov	r2,zero
 80006d8:	f800283a 	ret
 80006dc:	00c00044 	movi	r3,1
 80006e0:	003ff406 	br	80006b4 <__alt_exception_stack_pointer+0xf80006b4>

080006e4 <__umodsi3>:
 80006e4:	2005883a 	mov	r2,r4
 80006e8:	2900122e 	bgeu	r5,r4,8000734 <__umodsi3+0x50>
 80006ec:	28001116 	blt	r5,zero,8000734 <__umodsi3+0x50>
 80006f0:	01800804 	movi	r6,32
 80006f4:	00c00044 	movi	r3,1
 80006f8:	00000206 	br	8000704 <__umodsi3+0x20>
 80006fc:	30000c26 	beq	r6,zero,8000730 <__umodsi3+0x4c>
 8000700:	28000516 	blt	r5,zero,8000718 <__umodsi3+0x34>
 8000704:	294b883a 	add	r5,r5,r5
 8000708:	31bfffc4 	addi	r6,r6,-1
 800070c:	18c7883a 	add	r3,r3,r3
 8000710:	293ffa36 	bltu	r5,r4,80006fc <__alt_exception_stack_pointer+0xf80006fc>
 8000714:	18000626 	beq	r3,zero,8000730 <__umodsi3+0x4c>
 8000718:	1806d07a 	srli	r3,r3,1
 800071c:	11400136 	bltu	r2,r5,8000724 <__umodsi3+0x40>
 8000720:	1145c83a 	sub	r2,r2,r5
 8000724:	280ad07a 	srli	r5,r5,1
 8000728:	183ffb1e 	bne	r3,zero,8000718 <__alt_exception_stack_pointer+0xf8000718>
 800072c:	f800283a 	ret
 8000730:	f800283a 	ret
 8000734:	00c00044 	movi	r3,1
 8000738:	003ff706 	br	8000718 <__alt_exception_stack_pointer+0xf8000718>

0800073c <alt_ic_isr_register>:
 800073c:	80007c81 	jmpi	80007c8 <alt_iic_isr_register>

08000740 <alt_ic_irq_enable>:
 8000740:	0009303a 	rdctl	r4,status
 8000744:	00bfff84 	movi	r2,-2
 8000748:	2084703a 	and	r2,r4,r2
 800074c:	1001703a 	wrctl	status,r2
 8000750:	00c00044 	movi	r3,1
 8000754:	d0a01117 	ldw	r2,-32700(gp)
 8000758:	194a983a 	sll	r5,r3,r5
 800075c:	288ab03a 	or	r5,r5,r2
 8000760:	d1601115 	stw	r5,-32700(gp)
 8000764:	d0a01117 	ldw	r2,-32700(gp)
 8000768:	100170fa 	wrctl	ienable,r2
 800076c:	2001703a 	wrctl	status,r4
 8000770:	0005883a 	mov	r2,zero
 8000774:	f800283a 	ret

08000778 <alt_ic_irq_disable>:
 8000778:	0009303a 	rdctl	r4,status
 800077c:	00bfff84 	movi	r2,-2
 8000780:	2084703a 	and	r2,r4,r2
 8000784:	1001703a 	wrctl	status,r2
 8000788:	00ffff84 	movi	r3,-2
 800078c:	d0a01117 	ldw	r2,-32700(gp)
 8000790:	194a183a 	rol	r5,r3,r5
 8000794:	288a703a 	and	r5,r5,r2
 8000798:	d1601115 	stw	r5,-32700(gp)
 800079c:	d0a01117 	ldw	r2,-32700(gp)
 80007a0:	100170fa 	wrctl	ienable,r2
 80007a4:	2001703a 	wrctl	status,r4
 80007a8:	0005883a 	mov	r2,zero
 80007ac:	f800283a 	ret

080007b0 <alt_ic_irq_enabled>:
 80007b0:	000730fa 	rdctl	r3,ienable
 80007b4:	00800044 	movi	r2,1
 80007b8:	1144983a 	sll	r2,r2,r5
 80007bc:	10c4703a 	and	r2,r2,r3
 80007c0:	1004c03a 	cmpne	r2,r2,zero
 80007c4:	f800283a 	ret

080007c8 <alt_iic_isr_register>:
 80007c8:	00c007c4 	movi	r3,31
 80007cc:	19401616 	blt	r3,r5,8000828 <alt_iic_isr_register+0x60>
 80007d0:	defffe04 	addi	sp,sp,-8
 80007d4:	dfc00115 	stw	ra,4(sp)
 80007d8:	dc000015 	stw	r16,0(sp)
 80007dc:	0021303a 	rdctl	r16,status
 80007e0:	00ffff84 	movi	r3,-2
 80007e4:	80c6703a 	and	r3,r16,r3
 80007e8:	1801703a 	wrctl	status,r3
 80007ec:	280490fa 	slli	r2,r5,3
 80007f0:	00c20034 	movhi	r3,2048
 80007f4:	18c38904 	addi	r3,r3,3620
 80007f8:	1885883a 	add	r2,r3,r2
 80007fc:	11800015 	stw	r6,0(r2)
 8000800:	11c00115 	stw	r7,4(r2)
 8000804:	30000226 	beq	r6,zero,8000810 <alt_iic_isr_register+0x48>
 8000808:	80007400 	call	8000740 <alt_ic_irq_enable>
 800080c:	00000106 	br	8000814 <alt_iic_isr_register+0x4c>
 8000810:	80007780 	call	8000778 <alt_ic_irq_disable>
 8000814:	8001703a 	wrctl	status,r16
 8000818:	dfc00117 	ldw	ra,4(sp)
 800081c:	dc000017 	ldw	r16,0(sp)
 8000820:	dec00204 	addi	sp,sp,8
 8000824:	f800283a 	ret
 8000828:	00bffa84 	movi	r2,-22
 800082c:	f800283a 	ret

08000830 <alt_load>:
 8000830:	deffff04 	addi	sp,sp,-4
 8000834:	01020034 	movhi	r4,2048
 8000838:	01420034 	movhi	r5,2048
 800083c:	dfc00015 	stw	ra,0(sp)
 8000840:	21036804 	addi	r4,r4,3488
 8000844:	29437504 	addi	r5,r5,3540
 8000848:	2140061e 	bne	r4,r5,8000864 <alt_load+0x34>
 800084c:	01020034 	movhi	r4,2048
 8000850:	01420034 	movhi	r5,2048
 8000854:	21000804 	addi	r4,r4,32
 8000858:	29400804 	addi	r5,r5,32
 800085c:	2140121e 	bne	r4,r5,80008a8 <alt_load+0x78>
 8000860:	00000b06 	br	8000890 <alt_load+0x60>
 8000864:	00c20034 	movhi	r3,2048
 8000868:	18c37504 	addi	r3,r3,3540
 800086c:	1907c83a 	sub	r3,r3,r4
 8000870:	0005883a 	mov	r2,zero
 8000874:	10fff526 	beq	r2,r3,800084c <__alt_exception_stack_pointer+0xf800084c>
 8000878:	114f883a 	add	r7,r2,r5
 800087c:	39c00017 	ldw	r7,0(r7)
 8000880:	110d883a 	add	r6,r2,r4
 8000884:	10800104 	addi	r2,r2,4
 8000888:	31c00015 	stw	r7,0(r6)
 800088c:	003ff906 	br	8000874 <__alt_exception_stack_pointer+0xf8000874>
 8000890:	01020034 	movhi	r4,2048
 8000894:	01420034 	movhi	r5,2048
 8000898:	21034c04 	addi	r4,r4,3376
 800089c:	29434c04 	addi	r5,r5,3376
 80008a0:	2140101e 	bne	r4,r5,80008e4 <alt_load+0xb4>
 80008a4:	00000b06 	br	80008d4 <alt_load+0xa4>
 80008a8:	00c20034 	movhi	r3,2048
 80008ac:	18c05604 	addi	r3,r3,344
 80008b0:	1907c83a 	sub	r3,r3,r4
 80008b4:	0005883a 	mov	r2,zero
 80008b8:	10fff526 	beq	r2,r3,8000890 <__alt_exception_stack_pointer+0xf8000890>
 80008bc:	114f883a 	add	r7,r2,r5
 80008c0:	39c00017 	ldw	r7,0(r7)
 80008c4:	110d883a 	add	r6,r2,r4
 80008c8:	10800104 	addi	r2,r2,4
 80008cc:	31c00015 	stw	r7,0(r6)
 80008d0:	003ff906 	br	80008b8 <__alt_exception_stack_pointer+0xf80008b8>
 80008d4:	8000be00 	call	8000be0 <alt_dcache_flush_all>
 80008d8:	dfc00017 	ldw	ra,0(sp)
 80008dc:	dec00104 	addi	sp,sp,4
 80008e0:	8000bf81 	jmpi	8000bf8 <alt_icache_flush_all>
 80008e4:	00c20034 	movhi	r3,2048
 80008e8:	18c36804 	addi	r3,r3,3488
 80008ec:	1907c83a 	sub	r3,r3,r4
 80008f0:	0005883a 	mov	r2,zero
 80008f4:	18bff726 	beq	r3,r2,80008d4 <__alt_exception_stack_pointer+0xf80008d4>
 80008f8:	114f883a 	add	r7,r2,r5
 80008fc:	39c00017 	ldw	r7,0(r7)
 8000900:	110d883a 	add	r6,r2,r4
 8000904:	10800104 	addi	r2,r2,4
 8000908:	31c00015 	stw	r7,0(r6)
 800090c:	003ff906 	br	80008f4 <__alt_exception_stack_pointer+0xf80008f4>

08000910 <alt_main>:
 8000910:	deffff04 	addi	sp,sp,-4
 8000914:	0009883a 	mov	r4,zero
 8000918:	dfc00015 	stw	ra,0(sp)
 800091c:	8000af40 	call	8000af4 <alt_irq_init>
 8000920:	8000b140 	call	8000b14 <alt_sys_init>
 8000924:	d1a01217 	ldw	r6,-32696(gp)
 8000928:	d1601317 	ldw	r5,-32692(gp)
 800092c:	d1201417 	ldw	r4,-32688(gp)
 8000930:	dfc00017 	ldw	ra,0(sp)
 8000934:	dec00104 	addi	sp,sp,4
 8000938:	800053c1 	jmpi	800053c <main>

0800093c <alt_printf>:
 800093c:	defff204 	addi	sp,sp,-56
 8000940:	2005883a 	mov	r2,r4
 8000944:	dfc00a15 	stw	ra,40(sp)
 8000948:	df000915 	stw	fp,36(sp)
 800094c:	ddc00815 	stw	r23,32(sp)
 8000950:	dd800715 	stw	r22,28(sp)
 8000954:	dd400615 	stw	r21,24(sp)
 8000958:	dd000515 	stw	r20,20(sp)
 800095c:	dcc00415 	stw	r19,16(sp)
 8000960:	dc800315 	stw	r18,12(sp)
 8000964:	dc400215 	stw	r17,8(sp)
 8000968:	dc000115 	stw	r16,4(sp)
 800096c:	d9400b15 	stw	r5,44(sp)
 8000970:	d9800c15 	stw	r6,48(sp)
 8000974:	d9c00d15 	stw	r7,52(sp)
 8000978:	04000944 	movi	r16,37
 800097c:	dd400b04 	addi	r21,sp,44
 8000980:	048018c4 	movi	r18,99
 8000984:	04c01e04 	movi	r19,120
 8000988:	05001cc4 	movi	r20,115
 800098c:	11000007 	ldb	r4,0(r2)
 8000990:	20003a26 	beq	r4,zero,8000a7c <alt_printf+0x140>
 8000994:	24000226 	beq	r4,r16,80009a0 <alt_printf+0x64>
 8000998:	14400044 	addi	r17,r2,1
 800099c:	00001406 	br	80009f0 <alt_printf+0xb4>
 80009a0:	14400084 	addi	r17,r2,2
 80009a4:	10800047 	ldb	r2,1(r2)
 80009a8:	10003426 	beq	r2,zero,8000a7c <alt_printf+0x140>
 80009ac:	1400021e 	bne	r2,r16,80009b8 <alt_printf+0x7c>
 80009b0:	8009883a 	mov	r4,r16
 80009b4:	00000e06 	br	80009f0 <alt_printf+0xb4>
 80009b8:	1480051e 	bne	r2,r18,80009d0 <alt_printf+0x94>
 80009bc:	a9000017 	ldw	r4,0(r21)
 80009c0:	ad800104 	addi	r22,r21,4
 80009c4:	b02b883a 	mov	r21,r22
 80009c8:	8000aac0 	call	8000aac <alt_putchar>
 80009cc:	00002906 	br	8000a74 <alt_printf+0x138>
 80009d0:	14c0201e 	bne	r2,r19,8000a54 <alt_printf+0x118>
 80009d4:	adc00017 	ldw	r23,0(r21)
 80009d8:	ad400104 	addi	r21,r21,4
 80009dc:	b8000326 	beq	r23,zero,80009ec <alt_printf+0xb0>
 80009e0:	05800704 	movi	r22,28
 80009e4:	00c003c4 	movi	r3,15
 80009e8:	00000306 	br	80009f8 <alt_printf+0xbc>
 80009ec:	01000c04 	movi	r4,48
 80009f0:	8000aac0 	call	8000aac <alt_putchar>
 80009f4:	00001f06 	br	8000a74 <alt_printf+0x138>
 80009f8:	1d84983a 	sll	r2,r3,r22
 80009fc:	15c4703a 	and	r2,r2,r23
 8000a00:	1000021e 	bne	r2,zero,8000a0c <alt_printf+0xd0>
 8000a04:	b5bfff04 	addi	r22,r22,-4
 8000a08:	003ffb06 	br	80009f8 <__alt_exception_stack_pointer+0xf80009f8>
 8000a0c:	070003c4 	movi	fp,15
 8000a10:	00c00244 	movi	r3,9
 8000a14:	b0001716 	blt	r22,zero,8000a74 <alt_printf+0x138>
 8000a18:	e588983a 	sll	r4,fp,r22
 8000a1c:	25c8703a 	and	r4,r4,r23
 8000a20:	2588d83a 	srl	r4,r4,r22
 8000a24:	19000236 	bltu	r3,r4,8000a30 <alt_printf+0xf4>
 8000a28:	21000c04 	addi	r4,r4,48
 8000a2c:	00000106 	br	8000a34 <alt_printf+0xf8>
 8000a30:	210015c4 	addi	r4,r4,87
 8000a34:	21003fcc 	andi	r4,r4,255
 8000a38:	2100201c 	xori	r4,r4,128
 8000a3c:	213fe004 	addi	r4,r4,-128
 8000a40:	d8c00015 	stw	r3,0(sp)
 8000a44:	8000aac0 	call	8000aac <alt_putchar>
 8000a48:	b5bfff04 	addi	r22,r22,-4
 8000a4c:	d8c00017 	ldw	r3,0(sp)
 8000a50:	003ff006 	br	8000a14 <__alt_exception_stack_pointer+0xf8000a14>
 8000a54:	1500071e 	bne	r2,r20,8000a74 <alt_printf+0x138>
 8000a58:	ad800017 	ldw	r22,0(r21)
 8000a5c:	ad400104 	addi	r21,r21,4
 8000a60:	b1000007 	ldb	r4,0(r22)
 8000a64:	20000326 	beq	r4,zero,8000a74 <alt_printf+0x138>
 8000a68:	b5800044 	addi	r22,r22,1
 8000a6c:	8000aac0 	call	8000aac <alt_putchar>
 8000a70:	003ffb06 	br	8000a60 <__alt_exception_stack_pointer+0xf8000a60>
 8000a74:	8805883a 	mov	r2,r17
 8000a78:	003fc406 	br	800098c <__alt_exception_stack_pointer+0xf800098c>
 8000a7c:	dfc00a17 	ldw	ra,40(sp)
 8000a80:	df000917 	ldw	fp,36(sp)
 8000a84:	ddc00817 	ldw	r23,32(sp)
 8000a88:	dd800717 	ldw	r22,28(sp)
 8000a8c:	dd400617 	ldw	r21,24(sp)
 8000a90:	dd000517 	ldw	r20,20(sp)
 8000a94:	dcc00417 	ldw	r19,16(sp)
 8000a98:	dc800317 	ldw	r18,12(sp)
 8000a9c:	dc400217 	ldw	r17,8(sp)
 8000aa0:	dc000117 	ldw	r16,4(sp)
 8000aa4:	dec00e04 	addi	sp,sp,56
 8000aa8:	f800283a 	ret

08000aac <alt_putchar>:
 8000aac:	defffd04 	addi	sp,sp,-12
 8000ab0:	dc000115 	stw	r16,4(sp)
 8000ab4:	d9000005 	stb	r4,0(sp)
 8000ab8:	2021883a 	mov	r16,r4
 8000abc:	01020034 	movhi	r4,2048
 8000ac0:	000f883a 	mov	r7,zero
 8000ac4:	01800044 	movi	r6,1
 8000ac8:	d80b883a 	mov	r5,sp
 8000acc:	21037204 	addi	r4,r4,3528
 8000ad0:	dfc00215 	stw	ra,8(sp)
 8000ad4:	8000b280 	call	8000b28 <altera_avalon_jtag_uart_write>
 8000ad8:	00ffffc4 	movi	r3,-1
 8000adc:	10c00126 	beq	r2,r3,8000ae4 <alt_putchar+0x38>
 8000ae0:	8005883a 	mov	r2,r16
 8000ae4:	dfc00217 	ldw	ra,8(sp)
 8000ae8:	dc000117 	ldw	r16,4(sp)
 8000aec:	dec00304 	addi	sp,sp,12
 8000af0:	f800283a 	ret

08000af4 <alt_irq_init>:
 8000af4:	deffff04 	addi	sp,sp,-4
 8000af8:	dfc00015 	stw	ra,0(sp)
 8000afc:	8000cf00 	call	8000cf0 <altera_nios2_qsys_irq_init>
 8000b00:	00800044 	movi	r2,1
 8000b04:	1001703a 	wrctl	status,r2
 8000b08:	dfc00017 	ldw	ra,0(sp)
 8000b0c:	dec00104 	addi	sp,sp,4
 8000b10:	f800283a 	ret

08000b14 <alt_sys_init>:
 8000b14:	01c0fa04 	movi	r7,1000
 8000b18:	000d883a 	mov	r6,zero
 8000b1c:	000b883a 	mov	r5,zero
 8000b20:	01080004 	movi	r4,8192
 8000b24:	8000b981 	jmpi	8000b98 <alt_avalon_timer_sc_init>

08000b28 <altera_avalon_jtag_uart_write>:
 8000b28:	21000017 	ldw	r4,0(r4)
 8000b2c:	3005883a 	mov	r2,r6
 8000b30:	298d883a 	add	r6,r5,r6
 8000b34:	21c00104 	addi	r7,r4,4
 8000b38:	2980072e 	bgeu	r5,r6,8000b58 <altera_avalon_jtag_uart_write+0x30>
 8000b3c:	38c00037 	ldwio	r3,0(r7)
 8000b40:	18ffffec 	andhi	r3,r3,65535
 8000b44:	183ffc26 	beq	r3,zero,8000b38 <__alt_exception_stack_pointer+0xf8000b38>
 8000b48:	28c00007 	ldb	r3,0(r5)
 8000b4c:	20c00035 	stwio	r3,0(r4)
 8000b50:	29400044 	addi	r5,r5,1
 8000b54:	003ff806 	br	8000b38 <__alt_exception_stack_pointer+0xf8000b38>
 8000b58:	f800283a 	ret

08000b5c <alt_avalon_timer_sc_irq>:
 8000b5c:	defffe04 	addi	sp,sp,-8
 8000b60:	dfc00115 	stw	ra,4(sp)
 8000b64:	dc000015 	stw	r16,0(sp)
 8000b68:	20000035 	stwio	zero,0(r4)
 8000b6c:	20800137 	ldwio	r2,4(r4)
 8000b70:	0021303a 	rdctl	r16,status
 8000b74:	00bfff84 	movi	r2,-2
 8000b78:	8084703a 	and	r2,r16,r2
 8000b7c:	1001703a 	wrctl	status,r2
 8000b80:	8000c380 	call	8000c38 <alt_tick>
 8000b84:	8001703a 	wrctl	status,r16
 8000b88:	dfc00117 	ldw	ra,4(sp)
 8000b8c:	dc000017 	ldw	r16,0(sp)
 8000b90:	dec00204 	addi	sp,sp,8
 8000b94:	f800283a 	ret

08000b98 <alt_avalon_timer_sc_init>:
 8000b98:	d0e01617 	ldw	r3,-32680(gp)
 8000b9c:	defffe04 	addi	sp,sp,-8
 8000ba0:	dfc00115 	stw	ra,4(sp)
 8000ba4:	2005883a 	mov	r2,r4
 8000ba8:	2809883a 	mov	r4,r5
 8000bac:	300b883a 	mov	r5,r6
 8000bb0:	1800011e 	bne	r3,zero,8000bb8 <alt_avalon_timer_sc_init+0x20>
 8000bb4:	d1e01615 	stw	r7,-32680(gp)
 8000bb8:	00c001c4 	movi	r3,7
 8000bbc:	10c00135 	stwio	r3,4(r2)
 8000bc0:	01820034 	movhi	r6,2048
 8000bc4:	d8000015 	stw	zero,0(sp)
 8000bc8:	100f883a 	mov	r7,r2
 8000bcc:	3182d704 	addi	r6,r6,2908
 8000bd0:	800073c0 	call	800073c <alt_ic_isr_register>
 8000bd4:	dfc00117 	ldw	ra,4(sp)
 8000bd8:	dec00204 	addi	sp,sp,8
 8000bdc:	f800283a 	ret

08000be0 <alt_dcache_flush_all>:
 8000be0:	0005883a 	mov	r2,zero
 8000be4:	00c20004 	movi	r3,2048
 8000be8:	1000003b 	flushd	0(r2)
 8000bec:	10800804 	addi	r2,r2,32
 8000bf0:	10fffd1e 	bne	r2,r3,8000be8 <__alt_exception_stack_pointer+0xf8000be8>
 8000bf4:	f800283a 	ret

08000bf8 <alt_icache_flush_all>:
 8000bf8:	01440004 	movi	r5,4096
 8000bfc:	0009883a 	mov	r4,zero
 8000c00:	8000cf81 	jmpi	8000cf8 <alt_icache_flush>

08000c04 <alt_alarm_stop>:
 8000c04:	0007303a 	rdctl	r3,status
 8000c08:	00bfff84 	movi	r2,-2
 8000c0c:	1884703a 	and	r2,r3,r2
 8000c10:	1001703a 	wrctl	status,r2
 8000c14:	21400117 	ldw	r5,4(r4)
 8000c18:	20800017 	ldw	r2,0(r4)
 8000c1c:	11400115 	stw	r5,4(r2)
 8000c20:	21400117 	ldw	r5,4(r4)
 8000c24:	28800015 	stw	r2,0(r5)
 8000c28:	21000115 	stw	r4,4(r4)
 8000c2c:	21000015 	stw	r4,0(r4)
 8000c30:	1801703a 	wrctl	status,r3
 8000c34:	f800283a 	ret

08000c38 <alt_tick>:
 8000c38:	d0a01517 	ldw	r2,-32684(gp)
 8000c3c:	defffb04 	addi	sp,sp,-20
 8000c40:	dc000015 	stw	r16,0(sp)
 8000c44:	d4200117 	ldw	r16,-32764(gp)
 8000c48:	10800044 	addi	r2,r2,1
 8000c4c:	dc800215 	stw	r18,8(sp)
 8000c50:	dc400115 	stw	r17,4(sp)
 8000c54:	dfc00415 	stw	ra,16(sp)
 8000c58:	dcc00315 	stw	r19,12(sp)
 8000c5c:	d0a01515 	stw	r2,-32684(gp)
 8000c60:	d4600104 	addi	r17,gp,-32764
 8000c64:	04800044 	movi	r18,1
 8000c68:	84401a26 	beq	r16,r17,8000cd4 <alt_tick+0x9c>
 8000c6c:	80800403 	ldbu	r2,16(r16)
 8000c70:	84c00017 	ldw	r19,0(r16)
 8000c74:	10000326 	beq	r2,zero,8000c84 <alt_tick+0x4c>
 8000c78:	d0a01517 	ldw	r2,-32684(gp)
 8000c7c:	1000011e 	bne	r2,zero,8000c84 <alt_tick+0x4c>
 8000c80:	80000405 	stb	zero,16(r16)
 8000c84:	d0e01517 	ldw	r3,-32684(gp)
 8000c88:	80800217 	ldw	r2,8(r16)
 8000c8c:	18800f36 	bltu	r3,r2,8000ccc <alt_tick+0x94>
 8000c90:	80800403 	ldbu	r2,16(r16)
 8000c94:	10000d1e 	bne	r2,zero,8000ccc <alt_tick+0x94>
 8000c98:	80800317 	ldw	r2,12(r16)
 8000c9c:	81000517 	ldw	r4,20(r16)
 8000ca0:	103ee83a 	callr	r2
 8000ca4:	1000031e 	bne	r2,zero,8000cb4 <alt_tick+0x7c>
 8000ca8:	8009883a 	mov	r4,r16
 8000cac:	8000c040 	call	8000c04 <alt_alarm_stop>
 8000cb0:	00000606 	br	8000ccc <alt_tick+0x94>
 8000cb4:	80c00217 	ldw	r3,8(r16)
 8000cb8:	10c5883a 	add	r2,r2,r3
 8000cbc:	d0e01517 	ldw	r3,-32684(gp)
 8000cc0:	80800215 	stw	r2,8(r16)
 8000cc4:	10c0012e 	bgeu	r2,r3,8000ccc <alt_tick+0x94>
 8000cc8:	84800405 	stb	r18,16(r16)
 8000ccc:	9821883a 	mov	r16,r19
 8000cd0:	003fe506 	br	8000c68 <__alt_exception_stack_pointer+0xf8000c68>
 8000cd4:	dfc00417 	ldw	ra,16(sp)
 8000cd8:	dcc00317 	ldw	r19,12(sp)
 8000cdc:	dc800217 	ldw	r18,8(sp)
 8000ce0:	dc400117 	ldw	r17,4(sp)
 8000ce4:	dc000017 	ldw	r16,0(sp)
 8000ce8:	dec00504 	addi	sp,sp,20
 8000cec:	f800283a 	ret

08000cf0 <altera_nios2_qsys_irq_init>:
 8000cf0:	000170fa 	wrctl	ienable,zero
 8000cf4:	f800283a 	ret

08000cf8 <alt_icache_flush>:
 8000cf8:	00840004 	movi	r2,4096
 8000cfc:	1140012e 	bgeu	r2,r5,8000d04 <alt_icache_flush+0xc>
 8000d00:	100b883a 	mov	r5,r2
 8000d04:	214b883a 	add	r5,r4,r5
 8000d08:	2005883a 	mov	r2,r4
 8000d0c:	1140032e 	bgeu	r2,r5,8000d1c <alt_icache_flush+0x24>
 8000d10:	1000603a 	flushi	r2
 8000d14:	10800804 	addi	r2,r2,32
 8000d18:	003ffc06 	br	8000d0c <__alt_exception_stack_pointer+0xf8000d0c>
 8000d1c:	210007cc 	andi	r4,r4,31
 8000d20:	20000126 	beq	r4,zero,8000d28 <alt_icache_flush+0x30>
 8000d24:	1000603a 	flushi	r2
 8000d28:	0000203a 	flushp
 8000d2c:	f800283a 	ret
